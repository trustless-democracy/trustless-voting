{"mappings":"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c,OAAO1B;QAEpC,IAAI,CAAC2B,SAAS,MAAM,IAAIR,MAAK,CAAA,mBAAA,EAAuBO,aAAY,aAAA,CAAe,EAAC;QAEhF,MAAMvB,SAAS,MAAMwB,QAAQV;QAE7BC,SAASf,MAAM,GAAGA;QAClB,OAAOkB;IACT;AACF;AAEM,SAAUO,uBAAuBC,gBAAmC,EAAA;IACxE,MAAM,EAAEd,YAAW,EAAES,gBAAe,EAAEM,gBAAe,EAAEC,uBAAsB,EAAEC,oBAAmB,EAAEC,YAAW,EAAEC,cAAa,EAAEC,aAAAA,EAAc,GAC5IN;IAEF,OAAOtB,CAAAA,GAAAA,8BAAe,AAAfA,EAAgB;QACrBe,gCAAgC;YAAEE;QAAiB;QACnDX,4BAA4B;YAAEE;QAAa;QAC3CU,4BACE,mBACAK;QAEFL,4BACE,0BACAM;QAEFN,4BACE,uBACAO;QAEFP,4BAAiE,eAAeQ;QAChFR,4BAA0C,oBAAoBS;QAC9DT,4BAA0C,eAAeS;QACzDT,4BAA0C,mBAAmBU;KAC9D;AACH;AAiBgBC,SAAAA,4BAA2BC,KAAA,EAA+D;IAAA,IAA9D,EAAEC,kBAAiB,EAAEC,kBAAAA,EAAyC,GAAAF;IACxG,OAAO9B,CAAAA,GAAAA,8BAAe,AAAfA,EAAgB;QACrBkB,4BAA2D,kBAAkBa;QAC7Eb,4BAAuD,qBAAqBc;KAC7E;AACH;AAKgB,SAAAC,wBAAuBC,KAAA,EAAuC;IAAA,IAAtC,EAAEC,iBAAAA,EAAoC,GAAAD;IAC5E,OAAOlC,CAAAA,GAAAA,8BAAe,AAAfA,EAAgB;QAACkB,4BAA0D,iBAAiBiB;KAAkB;AACvH;A,S,U,M,E,c,E;I,I,O,O,I,C;I,I,O,qB,E;Q,I,U,O,qB,C;Q,kB,C,U,Q,M,C,S,G,E;Y,O,O,wB,C,Q,K,U;Q,E,G,K,I,C,K,C,M,Q;I,C;I,O;A;A,S,gB,M,E;I,I,I,I,G,I,U,M,E,I;Q,I,S,I,I,S,C,E,G,S,C,E,G,C,C;Q,I,I,U,O,S,C,G,O,C,S,G,E;Y,C,G,8B,A,E,Q,K,M,C,I;Q,K,O,yB,G,O,gB,C,Q,O,yB,C,W,U,O,S,O,C,S,G,E;Y,O,c,C,Q,K,O,wB,C,Q;Q,E;I;I,O;A;AC3GM,MAAg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T;A,S,U,M,E,c,E;I,I,O,O,I,C;I,I,O,qB,E;Q,I,U,O,qB,C;Q,kB,C,U,Q,M,C,S,G,E;Y,O,O,wB,C,Q,K,U;Q,E,G,K,I,C,K,C,M,Q;I,C;I,O;A;A,S,gB,M,E;I,I,I,I,G,I,U,M,E,I;Q,I,S,I,I,S,C,E,G,S,C,E,G,C,C;Q,I,I,U,O,S,C,G,O,C,S,G,E;Y,C,G,8B,A,E,Q,K,M,C,I;Q,K,O,yB,G,O,gB,C,Q,O,yB,C,W,U,O,S,O,C,S,G,E;Y,O,c,C,Q,K,O,wB,C,Q;Q,E;I;I,O;A;ACpCM,SAAU8D,sCAAsCxB,QAA0B,EAAA;IAC9E,OAAOnD,CAAAA,GAAAA,oCAAqB,AAArBA,EAAsB,OAAOlB,KAA6BC,KAA4B6F,QAAiC;QAC5H,MAAMzF,SAAS,MAAMgE,SAASlD,OAAO,CAAAgC,gBAChCnD,CAAAA,GAAAA;QAELC,IAAII,MAAM,GAAGA;IACf;AACF;ACHM,MAAO0F,gCAAgClD;IACjCkB,oBAAoBH,gBAAwC,EAAA;QACpE,OAAOc,wBAAwBd;IACjC;IAEUQ,yBAAyBR,gBAAwC,EAAA;QACzE,OAAOiC,sCAAsCjC;IAC/C;AACD;ACPD,MAAMoC,sBAAuBd,CAAAA,cAC1BA,YAAqCe,OAAO,KAAK1E,aAAa2D,uBAAuBgB,CAAAA,GAAAA,4BAAoB,AAApBA;AAEjF,MAAMC,mBAAmBA,CAACvC,kBAAkCwC,yBAA6E;IAC9I,MAAMrE,mBAAsC;QAC1CL,iBAAiB,UAAW;YAC1B,MAAM,EAAE2E,KAAAA,EAAM,GAAG,MAAMzC,iBAAiB0C,OAAO;YAC/C,OAAO;gBAACD,KAAK1B,SAAS;aAAC;QACxB;QACD1D,aAAa,UAAW;YACtB,MAAM,EAAEoF,KAAAA,EAAM,GAAG,MAAMzC,iBAAiB0C,OAAO;YAC/C,OAAO;gBAACD,KAAK1B,SAAS;aAAC;QACxB;QACDvC,eAAe,UAAW;YACxB,MAAM2C,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACC,kBAAkB,GAAE;QACzC;QACD5C,cAAc,UAAW;YACvB,MAAM0C,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACC,kBAAkB,GA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B;QAED3I,qBAAqB,OAAOlC,MAAoH;YAAA,IAAAoI,cAAAC,cAAA2C;YAC9I,IAAI,CAAA,CAAA,AAAA5C,CAAAA,eAACpI,IAAImF,MAAM,AAANA,MAAM,IAAA,IAAAiD,iBAAA,KAAA,KAAVA,aAAYhD,OAAO,AAAPA,KAAW,CAAAiD,CAAAA,AAAAA,CAAAA,eAACrI,IAAImF,MAAM,AAANA,MAAMkD,IAAAA,IAAAA,iBAAVA,KAAAA,KAAAA,aAAYjD,OAAO,CAACM,MAAM,AAANA,GAC/C,MAAMX,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,WAAU;YAG9C,MAAMsF,OAAI,AAAAD,CAAAA,eAAGhL,IAAImF,MAAM,AAANA,MAAM,IAAA,IAAA6F,iBAAA,KAAA,IAAA,KAAA,IAAVA,aAAY5F,OAAO;YAChC,KAAK,MAAM8F,MAAMD,QAAQ,EAAE,CAAE;gBAC3B,MAAM/F,cAAcgG;gBACpB,IAAKhG,YAAqCe,OAAO,KAAK1E,aAAa2D,uBAAuBgB,CAAAA,GAAAA,4BAAoB,AAApBA,GACvFhB,YAAqCqF,IAAI,CAAC;oBAACH;iBAAQ;qBAEpDlF,YAAYsF,WAAW,CAACJ;YAE3B;YACD,OAAOa;QACT;IACD;IAED,OAAOlJ;AACT;A,S,Q,M,E,c,E;I,I,O,O,I,C;I,I,O,qB,E;Q,I,U,O,qB,C;Q,kB,C,U,Q,M,C,S,G,E;Y,O,O,wB,C,Q,K,U;Q,E,G,K,I,C,K,C,M,Q;I,C;I,O;A;A,S,c,M,E;I,I,I,I,G,I,U,M,E,I;Q,I,S,I,I,S,C,E,G,S,C,E,G,C,C;Q,I,I,Q,O,S,C,G,O,C,S,G,E;Y,C,G,8B,A,E,Q,K,M,C,I;Q,K,O,yB,G,O,gB,C,Q,O,yB,C,W,Q,O,S,O,C,S,G,E;Y,O,c,C,Q,K,O,wB,C,Q;Q,E;I;I,O;A;ACpEM,MAAOoJ,iCAAiCrI,CAAAA,GAAAA,0BAAoE,AAApEA;IAC5CC,YAAA/B,IAAA,CAAiG;QAAA,IAArF,EAAEgC,OAAM,EAAEC,MAAAA,EAA2E,GAAAjC;QAC/F,KAAK,CAAC;YAAEgC,QAAQ;gBAAEE,aAAWC,cAAAA,cAAOH,CAAAA,GAAAA,OAAOE,WAAW,GAAA,CAAA,GAAA;oBAAEE,gBAAgBC,CAAAA,GAAAA,sBAAgB,AAAhBA,EAAiBC,MAAAA;gBAAM;YAAI;YAAEL;QAAO;IAC9G;IAWO,MAAMmI,SAAM;QACjB,IAAI,CAAC,IAAI,CAACnI,KAAK,CAACoI,UAAU,EACxB,MAAMtG,CAAAA,GAAAA,uBAAS,AAATA,EAAUV,QAAQ,CAAC2C,MAAM,CAAC;YAAE5B,SAAS;YAA6E6B,MAAM;QAAI,GAAG;QACvI,MAAM,IAAI,CAACtD,aAAa,CAAC,IAAI,CAACV,KAAK,CAACoI,UAAU;QAC9C,OAAO,IAAI,CAACT,oBAAoB,CAACzJ,OAAO,CAAoB;YAAEf,QAAQ;QAAgB;IACxF;IAEO,MAAMuD,cAAcqG,OAAe,EAAA;QACxC,MAAMjI,mBAAmB,MAAMgC,oBAAoB;YAAEiG;YAAS5D,wBAAwB,IAAI,CAACA,sBAAsB,CAACyB,IAAI,CAAC,IAAI;QAAC;QAE5H,MAAM7D,mBAAmBlC,uBAAuBC;QAEhD,MAAM8B,SAAS,IAAIC,CAAAA,GAAAA,yBAAU,AAAVA;QACnB,MAAM,EAAEhD,kBAAAA,EAAmB,GAAGJ,oBAAoB,IAAI,CAACsC,MAAM,CAACE,WAAgC;QAC9FW,OAAOI,IAAI,CAAC,IAAI,CAACqH,wBAAwB;QACzCzH,OAAOI,IAAI,CAAC,IAAI,CAACsH,oBAAoB;QACrC1H,OAAOI,IAAI,CAACD;QACZH,OAAOI,IAAI,CAACnD;QAEZ,MAAMuD,WAAWC,CAAAA,GAAAA,mCAAkB,AAAlBA,EAAmBT;QAEpC,IAAI,CAACU,yBAAyB,CAACF;QAE/B,MAAM,IAAI,CAACG,aAAa;IAC1B;IAEO,MAAMgH,cAAcrG,MAA8B,EAAA;QACvD,IAAI,CAAC,IAAI,CAACyF,oBAAoB,EAAE,MAAM7F,CAAAA,GAAAA,uBAAS,AAATA,EAAUV,QAAQ,CAAC2C,MAAM,CAAC;YAAE5B,SAAS;YAA+B6B,MAAM;QAAI,GAAG;QACvH,MAAMwE,cAAc,MAAM,IAAI,CAACb,oBAAoB,CAACzJ,OAAO,CAAkB;YAAEf,QAAQ;QAAkB;QACzG,IAAIqL,gBAAgBtG,OAAOkG,UAAU,EAAE;YACrC,MAAM,IAAI,CAAC1H,aAAa,CAACwB,OAAOkG,UAAU;YAC1C,IAAI,CAACT,oBAAoB,CAACf,IAAI,CAAC,mBAAmB;gBAChDvI,UAAU,MAAM,IAAI,CAACsJ,oBAAoB,CAACzJ,OAAO,CAAoB;oBAAEf,QAAQ;gBAAmB;YACnG;QACF,CAAA;IACH;IAEO,MAAMmD,YAAY4B,MAA2B,EAAA;QAClD,IAAI,CAAC,IAAI,CAACyF,oBAAoB,EAAE,MAAM7F,CAAAA,GAAAA,uBAAS,AAATA,EAAUV,QAAQ,CAAC2C,MAAM,CAAC;YAAE5B,SAAS;YAA+B6B,MAAM;QAAI,GAAG;QACvH,MAAM/D,cAAc,IAAI,CAACwI,cAAc,CAACvG,OAAOpF,OAAO;QACtD,IAAI,CAAC0E,MAAM,CAAC;YACV1E,SAAS;QACV;QACD,IAAI,CAACgK,SAAS,CAAC;YAAE7G;QAAW;QAC5B,MAAM8G,UAAU,MAAM,IAAI,CAACY,oBAAoB,CAACzJ,OAAO,CAAkB;YAAEf,QAAQ;QAAkB;QACrG,MAAM,IAAI,CAACuD,aAAa,CAACqG;IAC3B;IAEU,MAAMxF,gBAAa;QAC3B,IAAI,CAAC,IAAI,CAACoG,oBAAoB,EAAE,MAAM7F,CAAAA,GAAAA,uBAAS,AAATA,EAAUV,QAAQ,CAAC2C,MAAM,CAAC;YAAE5B,SAAS;YAA+B6B,MAAM;QAAI,GAAG;QACvH,MAAM0E,SAAS,MAAM,IAAI,CAACf,oBAAoB,CAACzJ,OAAO,CAAkB;YACtEf,QAAQ;YACR+E,QAAQ,EAAA;QACT;QACD,MAAM,EAAEjC,YAAAA,EAAa,GAAG,IAAI,CAACF,MAAM;QACnC,IAAI2I,WAAW,MACb,MAAMhC,CAAAA,GAAAA,+BAAyB,AAAzBA,EAA0BC,kBAAkB,CAAC,CAAsD1G,mDAAAA,EAAAA,YAAYvC,SAAW,CAAA,CAAA,EAAC;QACnI,IAAI,CAAC8D,MAAM,CAAC;YAAE1E,SAASmD,YAAYnD,OAAAA;QAAS;QAC5C,IAAI,IAAI,CAACkD,KAAK,CAAClD,OAAO,KAAKmD,YAAYnD,OAAO,EAAE;YAC9C,IAAI,CAACsE,QAAQ,CAACwF,IAAI,CAAC,gBAAgB,IAAI,CAAC5G,KAAK,CAAClD,OAAO;YACrD,IAAI,CAACsE,QAAQ,CAACwF,IAAI,CAAC,WAAW;gBAAE9J,SAAS,IAAI,CAACkD,KAAK,CAAClD,OAAAA;YAAO;QAC5D,CAAA;QACD,OAAO,IAAI,CAACkD,KAAK,CAAClD,OAAO;IAC3B;IAEQuL,2BAAwB;QAC9B,MAAMM,sBAA4C;YAChDpJ,mBAAmB,OAAOxC,MAA4D;gBACpF,IAAI,CAACA,IAAImF,MAAM,EAAE,MAAMJ,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,0BAAyB;gBAC5E,MAAM,EAAE5F,QAAO,EAAE0I,UAAS,EAAEE,QAAO,EAAEC,kBAAiB,EAAEE,eAAAA,EAAgB,GAAG9I,IAAImF,MAAM;gBAErF,IAAI,CAACpF,SAAS,MAAMgF,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,kCAAiC;gBACjF,IAAI,CAACgD,WAAWA,QAAQjD,MAAM,KAAK,GAAG,MAAMX,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,kCAAiC;gBACzG,IAAI,CAACmD,gBAAgB,MAAM/D,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,yCAAwC;gBAC/F,IAAI,CAAC6C,QAAQ,CAAC;oBACZpF,gBAAgBC,CAAAA,GAAAA,sBAAgB,AAAhBA,EAAiBC,MAAM;oBACvCvD;oBACAmJ,QAAQ,AAAAJ,CAAAA,mBAAAA,IAAAA,IAAAA,mBAAc,KAAA,IAAA,KAAA,IAAdA,eAAgBG,MAAM,AAANA,KAAU;oBAClCD,YAAY,AAAAF,CAAAA,mBAAAA,IAAAA,IAAAA,mBAAc,KAAA,IAAA,KAAA,IAAdA,eAAgBC,IAAI,AAAJA,KAAQ;oBACpCL,aAAaD;oBACb9H,WAAWgI,OAAO,CAAC,EAAE;oBACrBE,eAAe,AAAAD,CAAAA,sBAAAA,IAAAA,IAAAA,sBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,iBAAiB,CAAG,EAAE,AAAD,KAAK;oBACzCO,UAAU,AAAAL,CAAAA,mBAAc,IAAA,IAAdA,mBAAAA,KAAAA,IAAAA,KAAAA,IAAAA,eAAgBK,QAAQ,AAARA,KAAY;gBACvC;YACF;YACD1G,mBAAmB,OAAOzC,MAAwD;gBAChF,IAAI,CAACA,IAAImF,MAAM,EAAE,MAAMJ,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,0BAAyB;gBAC5E,IAAI,CAAC3F,IAAImF,MAAM,CAACpF,OAAO,EAAE,MAAMgF,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,mBAAkB;gBAC7E,MAAM,IAAI,CAACpC,WAAW,CAACvD,IAAImF,MAAM;YACnC;QACD;QACD,MAAM0G,wBAAwBvJ,4BAA4BsJ;QAC1D,OAAOC;IACT;IAEQN,uBAAoB;QAC1B,MAAMO,kBAAoC;YACxClJ,kBAAkB,OAAO5C,MAA2D;gBAClF,IAAI,CAACA,IAAImF,MAAM,EAAE,MAAMJ,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,0BAAyB;gBAC5E,IAAI,CAAC3F,IAAImF,MAAM,CAACkG,UAAU,EAAE,MAAMtG,CAAAA,GAAAA,uBAAS,AAATA,EAAUC,GAAG,CAACW,aAAa,CAAC,sBAAqB;gBACnF,MAAM,EAAE0F,WAAAA,EAAY,GAAGrL,IAAImF,MAAM;gBACjC,MAAM,IAAI,CAACqG,aAAa,CAAC;oBAAEH;gBAAU;YACvC;QACD;QACD,OAAO3I,wBAAwBoJ;IACjC;A;AAvHWX,CAAAA,GAAAA,8BAAAA,AAAAA,EAAAA,0BAKyB,uBAAA,OAAOhG,SAGH;IACtC,MAAM4G,kBAAkB,IAAIZ,yBAAyB;QAAEnI,QAAQ;YAAEE,aAAaiC,OAAOjC,WAAAA;QAAa;IAAA;IAClG,MAAM6I,gBAAgBpI,aAAa,CAACwB,OAAO6E,OAAO;IAClD,OAAO+B;AACT;AC/BWC,MAAAA;IAGXjJ,YAAYsB,QAAkC,CAAA;QAAA4H,CAAAA,GAAAA,8BAAA,AAAAA,EAAA,IAAA,EAAA,YAAA,KAAA;QAC5C,IAAI,CAAC5H,QAAQ,GAAGA;IAClB;IAEO,MAAM3C,kBAAe;QAC1B,MAAMJ,WAAW,MAAM,IAAI,CAAC+C,QAAQ,CAAClD,OAAO,CAAW;YACrDf,QAAQ;YACR+E,QAAQ,CAAA;QACT;QACD,OAAO7D;IACT;IAEO,MAAMW,uBAAoEiD,WAAc,EAAA;QAC7F,MAAM,EAAEK,UAAAA,EAAW,GAAG,MAAM,IAAI,CAAClB,QAAQ,CAAClD,OAAO,CAAwB;YACvEf,QAAQ;YACR+E,QAAQ;gBACNC,SAASF;YACV;QACF;QACD,OAAO;YAAEK;QAAW;IACtB;IAEO,MAAMvD,gBAA6DkD,WAAc,EAAA;QACtF,MAAMgH,oBAAoB,MAAM,IAAI,CAAC7H,QAAQ,CAAClD,OAAO,CAAC;YACpDf,QAAQ;YACR+E,QAAQ;gBACNC,SAASF;YACV;QACF;QACD,OAAOgH;IACT;IAEO,MAAMhK,oBAAiEoG,YAAiB,EAAA;QAC7F,MAAM6D,qBAAqB,MAAM,IAAI,CAAC9H,QAAQ,CAAClD,OAAO,CAAC;YACrDf,QAAQ;YACR+E,QAAQ;gBACNC,SAASkD;YACV;QACF;QACD,OAAO6D;IACT;IAEO,MAAMhK,YAAYkE,IAAgB,EAAA;QACvC,MAAMjF,WAAW,MAAM,IAAI,CAACiD,QAAQ,CAAClD,OAAO,CAAa;YACvDf,QAAQ;YACR+E,QAAQ;gBACNC,SAASiB;YACV;QACF;QACD,OAAOjF;IACT;IAEO,MAAMD,QAAWiL,IAAsB,EAAA;QAC5C,MAAM/L,SAAS,MAAM,IAAI,CAACgE,QAAQ,CAAClD,OAAO,CAAIiL;QAC9C,OAAO/L;IACT;AACD;;;AC/DD,IAAI,QAAQ,QAAQ;AACpB,IAAI,WAAW;AAEf,OAAO,OAAO,GAAG,MAAM;;;ACHvB;AACA,6BAA6B;AAC7B,yCAAyC;AACzC,mEAAmE;AACnE,mEAAmE;AACnE,sEAAsE;AACtE,aAAa;AACb,IAAI,UAAU,QAAQ,oBAAe,MAAM;AAC3C,SAAS,KAAM,QAAQ,EAAE;IACvB,IAAI,SAAS,MAAM,IAAI,KAAO,MAAM,IAAI,UAAU,qBAAoB;IACtE,IAAI,WAAW,IAAI,WAAW;IAC9B,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IACnC,QAAQ,CAAC,EAAE,GAAG;IAEhB,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;QACxC,IAAI,IAAI,SAAS,MAAM,CAAC;QACxB,IAAI,KAAK,EAAE,UAAU,CAAC;QACtB,IAAI,QAAQ,CAAC,GAAG,KAAK,KAAO,MAAM,IAAI,UAAU,IAAI,iBAAgB;QACpE,QAAQ,CAAC,GAAG,GAAG;IACjB;IACA,IAAI,OAAO,SAAS,MAAM;IAC1B,IAAI,SAAS,SAAS,MAAM,CAAC;IAC7B,IAAI,SAAS,KAAK,GAAG,CAAC,QAAQ,KAAK,GAAG,CAAC,KAAK,mCAAmC;;IAC/E,IAAI,UAAU,KAAK,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,MAAM,mCAAmC;;IAChF,SAAS,OAAQ,MAAM,EAAE;QACvB,IAAI,MAAM,OAAO,CAAC,WAAW,kBAAkB,YAAc,SAAS,QAAQ,IAAI,CAAC;QACnF,IAAI,CAAC,QAAQ,QAAQ,CAAC,SAAW,MAAM,IAAI,UAAU,mBAAkB;QACvE,IAAI,OAAO,MAAM,KAAK,GAAK,OAAO;QAC9B,+BAA+B;QACnC,IAAI,SAAS;QACb,IAAI,SAAS;QACb,IAAI,SAAS;QACb,IAAI,OAAO,OAAO,MAAM;QACxB,MAAO,WAAW,QAAQ,MAAM,CAAC,OAAO,KAAK,EAAG;YAC9C;YACA;QACF;QACI,6DAA6D;QACjE,IAAI,OAAO,AAAE,CAAA,OAAO,MAAK,IAAK,UAAU,MAAO;QAC/C,IAAI,MAAM,IAAI,WAAW;QACrB,qBAAqB;QACzB,MAAO,WAAW,KAAM;YACtB,IAAI,QAAQ,MAAM,CAAC,OAAO;YACpB,gCAAgC;YACtC,IAAI,IAAI;YACR,IAAK,IAAI,MAAM,OAAO,GAAG,AAAC,CAAA,UAAU,KAAK,IAAI,MAAK,KAAO,QAAQ,IAAK,OAAO,GAAG,CAAE;gBAChF,SAAS,AAAC,MAAM,GAAG,CAAC,IAAI,KAAM;gBAC9B,GAAG,CAAC,IAAI,GAAG,AAAC,QAAQ,SAAU;gBAC9B,QAAQ,AAAC,QAAQ,SAAU;YAC7B;YACA,IAAI,UAAU,GAAK,MAAM,IAAI,MAAM,kBAAiB;YACpD,SAAS;YACT;QACF;QACI,wCAAwC;QAC5C,IAAI,MAAM,OAAO;QACjB,MAAO,QAAQ,QAAQ,GAAG,CAAC,IAAI,KAAK,EAClC;QAEE,sCAAsC;QAC1C,IAAI,MAAM,OAAO,MAAM,CAAC;QACxB,MAAO,MAAM,MAAM,EAAE,IAAO,OAAO,SAAS,MAAM,CAAC,GAAG,CAAC,IAAI;QAC3D,OAAO;IACT;IACA,SAAS,aAAc,MAAM,EAAE;QAC7B,IAAI,OAAO,WAAW,UAAY,MAAM,IAAI,UAAU,mBAAkB;QACxE,IAAI,OAAO,MAAM,KAAK,GAAK,OAAO,QAAQ,KAAK,CAAC;QAChD,IAAI,MAAM;QACN,+BAA+B;QACnC,IAAI,SAAS;QACb,IAAI,SAAS;QACb,MAAO,MAAM,CAAC,IAAI,KAAK,OAAQ;YAC7B;YACA;QACF;QACI,8DAA8D;QAClE,IAAI,OAAO,AAAG,CAAA,OAAO,MAAM,GAAG,GAAE,IAAK,SAAU,MAAO,EAAE,kCAAkC;;QAC1F,IAAI,OAAO,IAAI,WAAW;QACtB,0BAA0B;QAC9B,MAAO,MAAM,CAAC,IAAI,CAAE;YACZ,mBAAmB;YACzB,IAAI,QAAQ,QAAQ,CAAC,OAAO,UAAU,CAAC,KAAK;YACtC,oBAAoB;YAC1B,IAAI,UAAU,KAAO;YACrB,IAAI,IAAI;YACR,IAAK,IAAI,MAAM,OAAO,GAAG,AAAC,CAAA,UAAU,KAAK,IAAI,MAAK,KAAO,QAAQ,IAAK,OAAO,GAAG,CAAE;gBAChF,SAAS,AAAC,OAAO,IAAI,CAAC,IAAI,KAAM;gBAChC,IAAI,CAAC,IAAI,GAAG,AAAC,QAAQ,QAAS;gBAC9B,QAAQ,AAAC,QAAQ,QAAS;YAC5B;YACA,IAAI,UAAU,GAAK,MAAM,IAAI,MAAM,kBAAiB;YACpD,SAAS;YACT;QACF;QACI,+BAA+B;QACnC,IAAI,MAAM,OAAO;QACjB,MAAO,QAAQ,QAAQ,IAAI,CAAC,IAAI,KAAK,EACnC;QAEF,IAAI,MAAM,QAAQ,WAAW,CAAC,SAAU,CAAA,OAAO,GAAE;QACjD,IAAI,IAAI,CAAC,MAAM,GAAG;QAClB,IAAI,IAAI;QACR,MAAO,QAAQ,KACb,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM;QAExB,OAAO;IACT;IACA,SAAS,OAAQ,MAAM,EAAE;QACvB,IAAI,SAAS,aAAa;QAC1B,IAAI,QAAU,OAAO;QACrB,MAAM,IAAI,MAAM,aAAa,OAAO,cAAa;IACnD;IACA,OAAO;QACL,QAAQ;QACR,cAAc;QACd,QAAQ;IACV;AACF;AACA,OAAO,OAAO,GAAG;;;A;;A,6C;A,+D;A,mE;A,+D;A,gD;A,gE;A,sE;A,2D;A,+C;A,wE;A,8D;A,0D;A,gD;A,oD;A,0C;A,mD;A,yD;A,6C;A,sD;A,sE;A,4C;A,4C;A,qD;A,6C;A,wD;A,+C;A,0D;A,kD;A,sD;A,uD;A,+C;A,+D;A,mD;A,qD;A,+D;A,gE;A,yD;A,kE;A,gE;A,sE;A,wD;A,2D;A,+D;A,gE;A,iE;A,sD;A,0D;A,wD;A,4D;A,8D;A,sD;A,kD;A,4C;A,uD;A,mD;A,iD;A,gF;A,yE;A,oE;A,4D;A,wD;A,uD;A,wD;A,yD;A,qD;A,mD;A,sD;A,0D;A,iD;A,6D;A,8C;A,qD;A,iD;A,mD;A,kE;A,+D;A;A;A;A;;A;;A;A;A;A;A;A;;A;;A;;A;A;A;AEnHjB;;;;CAIA,GAWAgM,SAAQC,KAAK,CAACC,UAAU,GAAG,CAAC,GAAGC,IAAMC,CAAAA,GAAAA,cAAM,AAANA,EAAOJ,SAAQC,KAAK,CAACI,WAAW,IAAIF;AAElE,MAAMG,qBAAqBN,SAAQC,KAAK,CAACM,gBAAgB;AACzD,MAAMC,kBAAkB,IAAsB;IACnD,MAAMC,gBAAgBT,SAAQC,KAAK,CAACM,gBAAgB;IACpD,MAAMjI,YAAYoI,aAAaD;IAC/B,MAAMxC,YAAY,IAAI0C,WAAW;IACjC1C,UAAU2C,GAAG,CAACH;IACdxC,UAAU2C,GAAG,CAACtI,WAAW;IACzB,OAAO;QACLA;QACA2F;IACD;AACH;AACO,MAAMyC,eAAeV,SAAQa,IAAI,CAACH,YAAY;AAC9C,SAASI,UAAUxI,SAAqB,EAAW;IACxD,IAAI;QACF0H,SAAQe,KAAK,CAACC,OAAO,CAAC1I,WAAW,IAAI;QACrC,OAAO,IAAI;IACb,EAAE,OAAM;QACN,OAAO,KAAK;IACd;AACF;AACO,MAAM4F,OAAO,CAClBnF,SACAkF,YACG+B,SAAQa,IAAI,C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,c,C,S,c;I,O,I;A;A,Q,G,G,Q,E,G,Q,M,G,Q,K,G,Q,K,G,Q,K,G,Q,K,G,Q,K,G,Q,I,G,Q,G,G,Q,G,G,Q,G,G,Q,G,G,Q,G,G,Q,E,G,Q,M,G,Q,M,G,Q,Q,G,Q,I,G,Q,O,G,Q,I,G,Q,O,G,Q,Q,G,Q,Y,G,Q,a,G,Q,K,G,Q,wB,G,Q,kB,G,Q,S,G,Q,Q,G,Q,Q,G,Q,M,G,Q,O,G,Q,K,G,Q,W,G,Q,S,G,Q,Y,G,Q,U,G,Q,K,G,Q,G,G,Q,M,G,Q,I,G,Q,Y,G,Q,W,G,Q,c,G,Q,qB,G,Q,gB,G,Q,M,G,Q,kB,G,Q,e,G,K;A,Q,Q,G,Q,I,G,Q,I,G,Q,I,G,Q,wB,G,Q,K,G,Q,G,G,Q,I,G,Q,M,G,Q,K,G,Q,G,G,Q,K,G,Q,G,G,Q,M,G,Q,K,G,Q,K,G,Q,K,G,Q,K,G,Q,K,G,Q,I,G,Q,G,G,Q,G,G,Q,G,G,Q,G,G,K;AAEA,MAAA,WAAA,QAAA;AASA;;WAEa,GACb,SAAgB,gBAAgB,CAAa,EAA7C;IACE,IAAI,CAAE,CAAA,aAAa,UAAA,GACjB,MAAM,IAAI,UAAU,0BAA0B;AAElD;AAJA,QAAA,eAAA,GAAA;AAMA;;WAEa,GACb,SAAgB,mBAAmB,CAAa,EAAhD;IACE,gBAAgB;IAChB,OAAO,SAAA,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,UAAU,EAAE,EAAE,MAAM;AACrD;AAHA,QAAA,kBAAA,GAAA;AAKA;;;;;;;;;;;;;;;CAeG,GACH,MAAsB;IAKpB,YAAY,IAAY,EAAE,QAAiB,CAA3C;QACE,IAAI,CAAC,OAAO,SAAS,CAAC,OACpB,MAAM,IAAI,UAAU,2BAA2B;QAGjD;;;;;;;;kEAQ4D,GAC5D,IAAI,CAAC,IAAI,GAAG;QAEZ;;;;;;;2BAOqB,GACrB,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA;;;;;;;;;;;;;;KAcG,GACH,wBAAA;QACE,OAAO,CAAA;IACT;IAwCA;;;;;;;;;;;;;;;KAeG,GACH,QAAQ,CAAc,EAAE,MAAe,EAAvC;QACE,IAAI,IAAI,IAAI,CAAC,IAAI,EACf,MAAM,IAAI,WAAW,sBAAsB;QAE7C,OAAO,IAAI,CAAC,IAAI;IAClB;IAEA;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AE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI;QAChC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI;QAChC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG;QAC/B,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,GAAG;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG;QACnC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI;QACrC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI;QACpC,IAAI,QAAQ,GAAG;QACf,IAAI,QAAQ,GAAG;QACf,IAAI,QAAQ,GAAG;QACf,IAAI,QAAQ,GAAG;IACjB;IAEA,OAAO;QAAC;QAAG;QAAG;QAAG;KAAE;AACrB;AACA;;;CAGC,GAGD,SAAS,aAAa,KAAK,EAAE;IAC3B,IAAI,MAAM,MAAM,KAAK,GACnB,OAAO,EAAE;IAGX,IAAI,UAAU,MAAM,MAAM,GAAG;IAC7B,IAAI,SAAS,IAAI,YAAY,gBAAgB;IAE7C,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,KAAK,EAChC,MAAM,CAAC,KAAK,EAAE,IAAI,AAAC,CAAA,KAAK,CAAC,IAAI,EAAE,GAAG,IAAG,KAAM,IAAI;IAGjD,OAAO;AACT;AACA;;;CAGC,GAGD,SAAS,QAAQ,CAAC,EAAE,CAAC,EAAE;IACrB,IAAI,MAAM,AAAC,CAAA,IAAI,MAAK,IAAM,CAAA,IAAI,MAAK;IACnC,IAAI,MAAM,AAAC,CAAA,KAAK,EAAC,IAAM,CAAA,KAAK,EAAC,IAAM,CAAA,OAAO,EAAC;IAC3C,OAAO,OAAO,KAAK,MAAM;AAC3B;AACA;;CAEC,GAGD,SAAS,cAAc,GAAG,EAAE,GAAG,EAAE;IAC/B,OAAO,OAAO,MAAM,QAAQ,KAAK;AACnC;AACA;;CAEC,GAGD,SAAS,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAChC,OAAO,QAAQ,cAAc,QAAQ,QAAQ,GAAG,IAAI,QAAQ,GAAG,KAAK,IAAI;AAC1E;AAEA,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAClC,OAAO,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AAC5C;AAEA,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAClC,OAAO,OAAO,IAAI,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG;AAC5C;AAEA,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAClC,OAAO,OAAO,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AACvC;AAEA,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAClC,OAAO,OAAO,IAAK,CAAA,IAAI,CAAC,CAAA,GAAI,GAAG,GAAG,GAAG,GAAG;AAC1C;kBAEe;;;ACtNf;;AAAA;;AACA;;AAEA,SAAS,GAAG,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE;IAChC,UAAU,WAAW,CAAC;IACtB,IAAI,OAAO,QAAQ,MAAM,IAAI,AAAC,CAAA,QAAQ,GAAG,IAAI,CAAA,GAAA,qBAAG,AAAD,CAAA,KAAM,gEAAgE;IAErH,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,OAAO;IAC3B,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,GAAG,OAAO,MAAM,oCAAoC;IAErE,IAAI,KAAK;QACP,SAAS,UAAU;QAEnB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EACxB,GAAG,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,EAAE;QAG3B,OAAO;IACT,CAAC;IAED,OAAO,CAAA,GAAA,2BAAS,AAAD,EAAE;AACnB;kBAEe;;;ACvBf;;AAAA;;AACA;;AACA,IAAI,KAAK,CAAA,GAAA,qBAAG,AAAD,EAAE,MAAM,MAAM,CAAA,GAAA,sBAAI,AAAD;kBACb;;;ACHf,0CAA0C;AAC1C,kDAAkD;AAClD;;AAAA,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IACrB,OAAQ;QACN,KAAK;YACH,OAAO,IAAI,IAAI,CAAC,IAAI;QAEtB,KAAK;YACH,OAAO,IAAI,IAAI;QAEjB,KAAK;YACH,OAAO,IAAI,IAAI,IAAI,IAAI,IAAI;QAE7B,KAAK;YACH,OAAO,IAAI,IAAI;IACnB;AACF;AAEA,SAAS,KAAK,CAAC,EAAE,CAAC,EAAE;IAClB,OAAO,KAAK,IAAI,MAAM,KAAK;AAC7B;AAEA,SAAS,KAAK,KAAK,EAAE;IACnB,IAAI,IAAI;QAAC;QAAY;QAAY;QAAY;KAAW;IACxD,IAAI,IAAI;QAAC;QAAY;QAAY;QAAY;QAAY;KAAW;IAEpE,IAAI,OAAO,UAAU,UAAU;QAC7B,IAAI,MAAM,SAAS,mBAAmB,SAAS,cAAc;QAE7D,QAAQ,EAAE;QAEV,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,EAAE,EAChC,MAAM,IAAI,CAAC,IAAI,UAAU,CAAC;IAE9B,OAAO,IAAI,CAAC,MAAM,OAAO,CAAC,QACxB,8BAA8B;IAC9B,QAAQ,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;IAGrC,MAAM,IAAI,CAAC;IACX,IAAI,IAAI,MAAM,MAAM,GAAG,IAAI;IAC3B,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI;IACtB,IAAI,IAAI,IAAI,MAAM;IAElB,IAAK,IAAI,KAAK,GAAG,KAAK,GAAG,EAAE,GAAI;QAC7B,IAAI,MAAM,IAAI,YAAY;QAE1B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EACxB,GAAG,CAAC,EAAE,GAAG,KAAK,CAAC,KAAK,KAAK,IAAI,EAAE,IAAI,KAAK,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,EAAE,IAAI,KAAK,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,EAAE,IAAI,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,EAAE;QAGzI,CAAC,CAAC,GAAG,GAAG;IACV;IAEA,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,AAAC,CAAA,MAAM,MAAM,GAAG,CAAA,IAAK,IAAI,KAAK,GAAG,CAAC,GAAG;IACpD,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG;IACtC,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,AAAC,CAAA,MAAM,MAAM,GAAG,CAAA,IAAK,IAAI;IAExC,IAAK,IAAI,MAAM,GAAG,MAAM,GAAG,EAAE,IAAK;QAChC,IAAI,IAAI,IAAI,YAAY;QAExB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,EACxB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE;QAGlB,IAAK,IAAI,KAAK,IAAI,KAAK,IAAI,EAAE,GAC3B,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QAGhE,IAAI,IAAI,CAAC,CAAC,EAAE;QACZ,IAAI,IAAI,CAAC,CAAC,EAAE;QACZ,IAAI,IAAI,CAAC,CAAC,EAAE;QACZ,IAAI,IAAI,CAAC,CAAC,EAAE;QACZ,IAAI,IAAI,CAAC,CAAC,EAAE;QAEZ,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,EAAE,IAAK;YACjC,IAAI,IAAI,KAAK,KAAK,CAAC,MAAM;YACzB,IAAI,IAAI,KAAK,GAAG,KAAK,EAAE,GAAG,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,KAAK;YAC3D,IAAI;YACJ,IAAI;YACJ,IAAI,KAAK,GAAG,QAAQ;YACpB,IAAI;YACJ,IAAI;QACN;QAEA,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,MAAM;QACpB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,MAAM;QACpB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,MAAM;QACpB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,MAAM;QACpB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,MAAM;IACtB;IAEA,OAAO;QAAC,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,IAAI;QAAM,CAAC,CAAC,EAAE,GAAG;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,IAAI;QAAM,CAAC,CAAC,EAAE,GAAG;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,IAAI;QAAM,CAAC,CAAC,EAAE,GAAG;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,IAAI;QAAM,CAAC,CAAC,EAAE,GAAG;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,KAAK;QAAM,CAAC,CAAC,EAAE,IAAI,IAAI;QAAM,CAAC,CAAC,EAAE,GAAG;KAAK;AAClW;kBAEe;;;AC/Ff;;kBAAe;;;ACAf;;AAAA;;AAEA,SAAS,QAAQ,IAAI,EAAE;IACrB,IAAI,CAAC,CAAA,GAAA,0BAAQ,AAAD,EAAE,OACZ,MAAM,UAAU,gBAAgB;IAGlC,OAAO,SAAS,KAAK,MAAM,CAAC,IAAI,IAAI;AACtC;kBAEe;;;ACVf;AAEA,MAAM,OAAO,QAAQ,oBAAQ,EAAE;AAE/B;;;;;;;;;;;;CAYC,GACD,MAAM,kBAAkB,SAAS,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE;IAC5D,IAAG,OAAO,WAAW,UACnB,MAAM,IAAI,UAAU,SAAS,qBAAqB;IAGpD,UAAU,WAAW,CAAC;IAEtB,+BAA+B;IAC/B,MAAM,UAAU,OAAO,QAAQ,OAAO,KAAK,WAAW,QAAQ,OAAO,GAAG,CAAC;IACzE,IAAI,YAAY,KAAK,YAAY,GAC/B,MAAM,IAAI,UAAU,UAAU,mBAAmB;IAGnD,MAAM,UAAU;QACd,QAAQ;IACV;IAEA,IAAG,YAAY,GACb,QAAQ,OAAO,GAAG;IAGpB,IAAG,QAAQ;QACT,6BAA6B;QAC7B,IAAG,OAAO,WAAW,YAAY,CAAC,MAAM,OAAO,CAAC,SAC9C,MAAM,IAAI,UAAU,SAAS,wCAAwC;QAEvE,QAAQ,MAAM,GAAG;IACnB,CAAC;IAED,sEAAsE;IACtE,IAAG,OAAO,OAAQ,aAAa;QAC7B,MAAM,YAAY,OAAO,QAAQ,SAAS,KAAK,aAAa,QAAQ,SAAS,GAAG,WAAW;YAAE,OAAO;QAAQ,CAAC;QAC7G,QAAQ,EAAE,GAAG,UAAU,SAAS;IAClC,OAAO,IAAI,YAAY,KAAK,OAAO,IAAI,EACrC,mCAAmC;IACnC;QAAA,IAAI,QAAQ,kBAAkB,EAC5B,QAAQ,EAAE,GAAG,IAAI,EAAE,mDAAmD;IACxE,OAEA,QAAQ,EAAE,GAAG;IAGf,OAAO;AACT;AAEA,OAAO,OAAO,GAAG;;;AC9DjB;;;;CAIC,GACD;AAAA;AAEA,IAAI,yBAAyB,QAAQ;AAErC,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO,IAAI;AACb;AACA,OAAO,CAAC,UAAU,GAAG,KAAK;AAE1B,IAAI,eAAe,uBAAuB,QAAQ;AAElD,IAAI,qBAAqB,uBAAuB,QAAQ;AAExD,IAAI,WAAW,uBAAuB,QAAQ;AAE9C,IAAI,mBAAmB,uBAAuB,QAAQ;AAEtD,IAAI,gBAAgB,uBAAuB,QAAQ;AAEnD,IAAI,aAAa,uBAAuB,QAAQ;AAEhD,IAAI,8BAA8B,uBAAuB,QAAQ;AAEjE,IAAI,mBAAmB,uBAAuB,QAAQ;AAEtD,IAAI,gBAAgB,QAAQ;AAE5B,SAAS,aAAa,OAAO,EAAE;IAAE,IAAI,4BAA4B;IAA6B,OAAO,SAAS,uBAAuB;QAAE,IAAI,QAAQ,AAAC,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,UAAU;QAAQ,IAAI,2BAA2B;YAAE,IAAI,YAAY,AAAC,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE,WAAW;YAAE,SAAS,QAAQ,SAAS,CAAC,OAAO,WAAW;QAAY,OAAS,SAAS,MAAM,KAAK,CAAC,IAAI,EAAE;QAAc,OAAO,AAAC,CAAA,GAAG,2BAA2B,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE;IAAS;AAAG;AAE3d,SAAS,4BAA4B;IAAE,IAAI,OAAO,YAAY,eAAe,CAAC,QAAQ,SAAS,EAAE,OAAO,KAAK;IAAE,IAAI,QAAQ,SAAS,CAAC,IAAI,EAAE,OAAO,KAAK;IAAE,IAAI,OAAO,UAAU,YAAY,OAAO,IAAI;IAAE,IAAI;QAAE,QAAQ,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,SAAS,CAAC,SAAS,EAAE,EAAE,WAAY,CAAC;QAAK,OAAO,IAAI;IAAE,EAAE,OAAO,GAAG;QAAE,OAAO,KAAK;IAAE;AAAE;AAExU,IAAI,SAAsC,SAAU,CAAC,EAAE,CAAC,EAAE;IACxD,IAAI,IAAI,CAAC;IAET,IAAK,IAAI,KAAK,EACZ,IAAI,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,MAAM,EAAE,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAGjF,IAAI,KAAK,IAAI,IAAI,OAAO,OAAO,qBAAqB,KAAK,YAAY;QAAA,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,qBAAqB,CAAC,IAAI,IAAI,EAAE,MAAM,EAAE,IACtI,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,OAAO,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnG,CAAC;IACD,OAAO;AACT,GAAG,aAAa;AAGhB,IAAI,eAAe,WAAW,GAAE,SAAU,aAAa,EAAE;IACtD,CAAA,GAAG,UAAU,CAAC,UAAU,AAAD,EAAG,cAAc;IAEzC,IAAI,SAAS,aAAa;IAE1B;;;;;;;;GAQC,GACD,SAAS,aAAa,gBAAgB,EAAE;QACtC,IAAI;QAEJ,IAAI,UAAU,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,qBAAqB;QAEvG,IAAI,KAAK,UAAU,MAAM,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,YAAY,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;QAE/E,IAAI,sBAAsB,UAAU,MAAM,GAAG,IAAI,SAAS,CAAC,EAAE,GAAG,SAAS;QACxE,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE;QAEvC,IAAI,iBAAiB,GAAG,WAAW,EAC/B,cAAc,mBAAmB,KAAK,IAAI,IAAI,GAAG,cAAc,EAC/D,eAAe,GAAG,SAAS,EAC3B,YAAY,iBAAiB,KAAK,IAAI,IAAI,GAAG,YAAY,EACzD,wBAAwB,GAAG,kBAAkB,EAC7C,qBAAqB,0BAA0B,KAAK,IAAI,OAAO,qBAAqB,EACpF,oBAAoB,GAAG,cAAc,EACrC,iBAAiB,sBAAsB,KAAK,IAAI,IAAI,iBAAiB,EACrE,eAAe,OAAO,IAAI;YAAC;YAAe;YAAa;YAAsB;SAAiB;QAElG,QAAQ,OAAO,IAAI,CAAC,IAAI;QACxB,MAAM,gBAAgB,GAAG;QACzB,MAAM,KAAK,GAAG,CAAC;QACf,MAAM,MAAM,GAAG;QACf,MAAM,OAAO,GAAG;QAChB,MAAM,WAAW,GAAG;QACpB,MAAM,KAAK,GAAG,KAAK;QACnB,MAAM,SAAS,GAAG;QAClB,MAAM,kBAAkB,GAAG;QAC3B,MAAM,kBAAkB,GAAG;QAC3B,MAAM,cAAc,GAAG;QACvB,MAAM,YAAY,GAAG;QACrB,MAAM,kBAAkB,GAAG;QAE3B,MAAM,mBAAmB,GAAG,uBAAuB,WAAY;YAC7D,OAAO,EAAE,MAAM,MAAM;QACvB;QAEA,IAAI,MAAM,WAAW,EAAE,MAAM,QAAQ,CAAC,MAAM,OAAO,EAAE,OAAO,MAAM,CAAC;YACjE,aAAa,MAAM,WAAW;YAC9B,WAAW,MAAM,SAAS;YAC1B,oBAAoB,MAAM,kBAAkB;YAC5C,gBAAgB,MAAM,cAAc;QACtC,GAAG,MAAM,YAAY;QACrB,OAAO;IACT;IACA;;;;GAIC,GAGA,CAAA,GAAG,aAAa,CAAC,UAAU,AAAD,EAAG,cAAc;QAAC;YAC3C,KAAK;YACL,OAAO,SAAS,UAAU;gBACxB,IAAI,IAAI,CAAC,MAAM,EAAE;gBAEjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,MAAM,CAAC;oBACxC,aAAa,IAAI,CAAC,WAAW;oBAC7B,WAAW,IAAI,CAAC,SAAS;oBACzB,oBAAoB,IAAI,CAAC,kBAAkB;oBAC3C,gBAAgB,IAAI,CAAC,cAAc;gBACrC,GAAG,IAAI,CAAC,YAAY;YACtB;QAWF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,KAAK,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE;gBACrD,IAAI,SAAS,IAAI;gBAEjB,IAAI,CAAC,WAAW,aAAa,AAAC,CAAA,GAAG,QAAQ,CAAC,UAAU,AAAD,EAAG,UAAU;oBAC9D,UAAU;oBACV,UAAU,IAAI;gBAChB,CAAC;gBAED,OAAO,IAAI,QAAQ,SAAU,OAAO,EAAE,MAAM,EAAE;oBAC5C,IAAI,CAAC,OAAO,KAAK,EAAE,OAAO,OAAO,IAAI,MAAM;oBAE3C,IAAI,SAAS,OAAO,mBAAmB,CAAC,QAAQ;oBAEhD,IAAI,UAAU;wBACZ,SAAS;wBACT,QAAQ;wBACR,QAAQ,UAAU,IAAI;wBACtB,IAAI;oBACN;oBAEA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,UAAU,SAAS,SAAU,KAAK,EAAE;wBACpE,IAAI,OAAO,OAAO,OAAO;wBACzB,OAAO,KAAK,CAAC,OAAO,GAAG;4BACrB,SAAS;gCAAC;gCAAS;6BAAO;wBAC5B;wBAEA,IAAI,SACF,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,GAAG,WAAW,WAAY;4BACpD,OAAO,OAAO,KAAK,CAAC,OAAO;4BAC3B,OAAO,IAAI,MAAM;wBACnB,GAAG;oBAEP;gBACF;YACF;QAQF;QAAG;YACD,KAAK;YACL,OAAO,WAAY;gBACjB,IAAI,SAAS,AAAC,CAAA,GAAG,kBAAkB,CAAC,UAAU,AAAD,EAAI,WAAW,GAAE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,QAAQ,MAAM,EAAE;oBAClH,IAAI;oBACJ,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,SAAS,QAAQ,EAAE;wBAC9D,MAAO,IAAC,CACN,OAAQ,SAAS,IAAI,GAAG,SAAS,IAAI;4BACnC,KAAK;gCACH,SAAS,IAAI,GAAG;gCAChB,OAAO,IAAI,CAAC,IAAI,CAAC,aAAa;4BAEhC,KAAK;gCACH,OAAO,SAAS,IAAI;gCAEpB,IAAI,MAAM;oCACR,SAAS,IAAI,GAAG;oCAChB,KAAM;gCACR,CAAC;gCAED,MAAM,IAAI,MAAM,yBAAyB;4BAE3C,KAAK;gCACH,OAAO,SAAS,MAAM,CAAC,UAAU;4BAEnC,KAAK;4BACL,KAAK;gCACH,OAAO,SAAS,IAAI;wBACxB;oBAEJ,GAAG,SAAS,IAAI;gBAClB;gBAEA,SAAS,MAAM,EAAE,EAAE;oBACjB,OAAO,OAAO,KAAK,CAAC,IAAI,EAAE;gBAC5B;gBAEA,OAAO;YACT;QAOF;QAAG;YACD,KAAK;YACL,OAAO,WAAY;gBACjB,IAAI,eAAe,AAAC,CAAA,GAAG,kBAAkB,CAAC,UAAU,AAAD,EAAI,WAAW,GAAE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,WAAW;oBACnH,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,UAAU,SAAS,EAAE;wBAChE,MAAO,IAAC,CACN,OAAQ,UAAU,IAAI,GAAG,UAAU,IAAI;4BACrC,KAAK;gCACH,UAAU,IAAI,GAAG;gCACjB,OAAO,IAAI,CAAC,IAAI,CAAC;4BAEnB,KAAK;gCACH,OAAO,UAAU,MAAM,CAAC,UAAU,UAAU,IAAI;4BAElD,KAAK;4BACL,KAAK;gCACH,OAAO,UAAU,IAAI;wBACzB;oBAEJ,GAAG,UAAU,IAAI;gBACnB;gBAEA,SAAS,cAAc;oBACrB,OAAO,aAAa,KAAK,CAAC,IAAI,EAAE;gBAClC;gBAEA,OAAO;YACT;QASF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,OAAO,MAAM,EAAE,MAAM,EAAE;gBACrC,IAAI,SAAS,IAAI;gBAEjB,OAAO,IAAI,QAAQ,SAAU,OAAO,EAAE,MAAM,EAAE;oBAC5C,IAAI,CAAC,OAAO,KAAK,EAAE,OAAO,OAAO,IAAI,MAAM;oBAC3C,IAAI,UAAU;wBACZ,SAAS;wBACT,QAAQ;wBACR,QAAQ,UAAU,IAAI;oBACxB;oBAEA,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,UAAU,SAAU,KAAK,EAAE;wBAC3D,IAAI,OAAO,OAAO,OAAO;wBACzB;oBACF;gBACF;YACF;QASF;QAAG;YACD,KAAK;YACL,OAAO,WAAY;gBACjB,IAAI,aAAa,AAAC,CAAA,GAAG,kBAAkB,CAAC,UAAU,AAAD,EAAI,WAAW,GAAE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,SAAS,KAAK,EAAE;oBACtH,IAAI;oBACJ,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,UAAU,SAAS,EAAE;wBAChE,MAAO,IAAC,CACN,OAAQ,UAAU,IAAI,GAAG,UAAU,IAAI;4BACrC,KAAK;gCACH,IAAI,OAAO,UAAU,UAAU,QAAQ;oCAAC;iCAAM;gCAC9C,UAAU,IAAI,GAAG;gCACjB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU;4BAE7B,KAAK;gCACH,SAAS,UAAU,IAAI;gCAEvB,IAAI,CAAE,CAAA,OAAO,UAAU,YAAY,MAAM,CAAC,MAAM,KAAK,IAAG,GAAI;oCAC1D,UAAU,IAAI,GAAG;oCACjB,KAAM;gCACR,CAAC;gCAED,MAAM,IAAI,MAAM,qCAAqC,QAAQ,aAAa,MAAM,CAAC,MAAM,EAAE;4BAE3F,KAAK;gCACH,OAAO,UAAU,MAAM,CAAC,UAAU;4BAEpC,KAAK;4BACL,KAAK;gCACH,OAAO,UAAU,IAAI;wBACzB;oBAEJ,GAAG,UAAU,IAAI;gBACnB;gBAEA,SAAS,UAAU,GAAG,EAAE;oBACtB,OAAO,WAAW,KAAK,CAAC,IAAI,EAAE;gBAChC;gBAEA,OAAO;YACT;QASF;QAAG;YACD,KAAK;YACL,OAAO,WAAY;gBACjB,IAAI,eAAe,AAAC,CAAA,GAAG,kBAAkB,CAAC,UAAU,AAAD,EAAI,WAAW,GAAE,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,SAAS,KAAK,EAAE;oBACxH,IAAI;oBACJ,OAAO,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,UAAU,SAAS,EAAE;wBAChE,MAAO,IAAC,CACN,OAAQ,UAAU,IAAI,GAAG,UAAU,IAAI;4BACrC,KAAK;gCACH,IAAI,OAAO,UAAU,UAAU,QAAQ;oCAAC;iCAAM;gCAC9C,UAAU,IAAI,GAAG;gCACjB,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW;4BAE9B,KAAK;gCACH,SAAS,UAAU,IAAI;gCAEvB,IAAI,CAAE,CAAA,OAAO,UAAU,YAAY,MAAM,CAAC,MAAM,KAAK,IAAG,GAAI;oCAC1D,UAAU,IAAI,GAAG;oCACjB,KAAM;gCACR,CAAC;gCAED,MAAM,IAAI,MAAM,8CAA8C,QAAQ;4BAExE,KAAK;gCACH,OAAO,UAAU,MAAM,CAAC,UAAU;4BAEpC,KAAK;4BACL,KAAK;gCACH,OAAO,UAAU,IAAI;wBACzB;oBAEJ,GAAG,UAAU,IAAI;gBACnB;gBAEA,SAAS,YAAY,GAAG,EAAE;oBACxB,OAAO,aAAa,KAAK,CAAC,IAAI,EAAE;gBAClC;gBAEA,OAAO;YACT;QASF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,MAAM,IAAI,EAAE,IAAI,EAAE;gBAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,MAAM;YAClC;QAUF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,SAAS,OAAO,EAAE,OAAO,EAAE;gBACzC,IAAI,SAAS,IAAI;gBAEjB,aAAa,IAAI,CAAC,kBAAkB;gBACpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS;gBAC7C,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,WAAY;oBAC/C,OAAO,KAAK,GAAG,IAAI;oBAEnB,OAAO,IAAI,CAAC;oBAEZ,OAAO,kBAAkB,GAAG;gBAC9B;gBACA,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,SAAU,IAAI,EAAE;oBACtD,IAAI,UAAU,KAAK,IAAI;oBACvB,IAAI,mBAAmB,aAAa,UAAU,OAAO,IAAI,CAAC,SAAS,QAAQ;oBAE3E,IAAI;wBACF,UAAU,KAAK,KAAK,CAAC;oBACvB,EAAE,OAAO,OAAO;wBACd;oBACF,EAAE,wDAAwD;oBAG1D,IAAI,QAAQ,YAAY,IAAI,OAAO,SAAS,CAAC,QAAQ,YAAY,EAAE,MAAM,EAAE;wBACzE,IAAI,CAAC,OAAO,IAAI,CAAC,QAAQ,MAAM,EAAE,MAAM,EAAE,OAAO,OAAO,IAAI,CAAC,QAAQ,YAAY;wBAChF,IAAI,OAAO;4BAAC,QAAQ,YAAY;yBAAC;wBACjC,IAAI,QAAQ,MAAM,CAAC,WAAW,KAAK,QAAQ,KAAK,IAAI,CAAC,QAAQ,MAAM;6BACjE,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,MAAM,CAAC,MAAM,EAAE,IACzC,KAAK,IAAI,CAAC,QAAQ,MAAM,CAAC,EAAE;yBAC3B,qEAAqE;wBACzE,yCAAyC;wBAEzC,OAAO,QAAQ,OAAO,GAAG,IAAI,CAAC,WAAY;4BACxC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ;wBAC5B;oBACF,CAAC;oBAED,IAAI,CAAC,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE;wBAC7B,8BAA8B;wBAC9B,IAAI,QAAQ,MAAM,IAAI,QAAQ,MAAM,EAClC,qEAAqE;wBACrE,OAAO,QAAQ,OAAO,GAAG,IAAI,CAAC,WAAY;4BACxC,OAAO,IAAI,CAAC,QAAQ,MAAM,EAAE,QAAQ,MAAM;wBAC5C;wBAGF;oBACF,CAAC,CAAC,kDAAkD;oBAGpD,IAAI,WAAW,YAAY,YAAY,SAAS,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,MAAM;oBAC9F,IAAI,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,aAAa,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO;oBACnF,IAAI,QAAQ,KAAK,EAAE,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,KAAK;yBAAO,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,MAAM;oBAC7H,OAAO,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACjC;gBACA,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,SAAU,KAAK,EAAE;oBACrD,OAAO,OAAO,IAAI,CAAC,SAAS;gBAC9B;gBACA,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,SAAU,KAAK,EAAE;oBACrD,IAAI,OAAO,MAAM,IAAI,EACjB,SAAS,MAAM,MAAM;oBACzB,IAAI,OAAO,KAAK,EACd,WAAW,WAAY;wBACrB,OAAO,OAAO,IAAI,CAAC,SAAS,MAAM;oBACpC,GAAG;oBACL,OAAO,KAAK,GAAG,KAAK;oBACpB,OAAO,MAAM,GAAG;oBAChB,IAAI,SAAS,MAAM;oBACnB,OAAO,kBAAkB;oBACzB,IAAI,OAAO,SAAS,IAAK,CAAA,OAAO,cAAc,GAAG,OAAO,kBAAkB,IAAI,OAAO,cAAc,KAAK,CAAA,GAAI,OAAO,kBAAkB,GAAG,WAAW,WAAY;wBAC7J,OAAO,OAAO,QAAQ,CAAC,SAAS;oBAClC,GAAG,OAAO,kBAAkB;gBAC9B;YACF;QACF;KAAE;IACF,OAAO;AACT,EAAE,cAAc,YAAY;AAE5B,OAAO,CAAC,UAAU,GAAG;;;ACjerB,IAAI,iBAAiB,QAAQ;AAC7B,SAAS,UAAU,QAAQ,EAAE,UAAU,EAAE;IACvC,IAAI,OAAO,eAAe,cAAc,eAAe,IAAI,EACzD,MAAM,IAAI,UAAU,sDAAsD;IAE5E,SAAS,SAAS,GAAG,OAAO,MAAM,CAAC,cAAc,WAAW,SAAS,EAAE;QACrE,aAAa;YACX,OAAO;YACP,UAAU,IAAI;YACd,cAAc,IAAI;QACpB;IACF;IACA,OAAO,cAAc,CAAC,UAAU,aAAa;QAC3C,UAAU,KAAK;IACjB;IACA,IAAI,YAAY,eAAe,UAAU;AAC3C;AACA,OAAO,OAAO,GAAG,WAAW,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;;;ACjBxG,SAAS,gBAAgB,CAAC,EAAE,CAAC,EAAE;IAC7B,OAAO,OAAO,GAAG,kBAAkB,OAAO,cAAc,GAAG,OAAO,cAAc,CAAC,IAAI,KAAK,SAAS,gBAAgB,CAAC,EAAE,CAAC,EAAE;QACvH,EAAE,SAAS,GAAG;QACd,OAAO;IACT,CAAC,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;IAC/E,OAAO,gBAAgB,GAAG;AAC5B;AACA,OAAO,OAAO,GAAG,iBAAiB,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;;;ACP9G,IAAI,UAAU,QAAQ,mBAAc,CAAC,UAAU;AAC/C,IAAI,wBAAwB,QAAQ;AACpC,SAAS,2BAA2B,IAAI,EAAE,IAAI,EAAE;IAC9C,IAAI,QAAS,CAAA,QAAQ,UAAU,YAAY,OAAO,SAAS,UAAS,GAClE,OAAO;SACF,IAAI,SAAS,KAAK,GACvB,MAAM,IAAI,UAAU,4DAA4D;IAElF,OAAO,sBAAsB;AAC/B;AACA,OAAO,OAAO,GAAG,4BAA4B,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;;;ACVzH,SAAS,uBAAuB,IAAI,EAAE;IACpC,IAAI,SAAS,KAAK,GAChB,MAAM,IAAI,eAAe,6DAA6D;IAExF,OAAO;AACT;AACA,OAAO,OAAO,GAAG,wBAAwB,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;;;ACNrH,SAAS,gBAAgB,CAAC,EAAE;IAC1B,OAAO,OAAO,GAAG,kBAAkB,OAAO,cAAc,GAAG,OAAO,cAAc,CAAC,IAAI,KAAK,SAAS,gBAAgB,CAAC,EAAE;QACpH,OAAO,EAAE,SAAS,IAAI,OAAO,cAAc,CAAC;IAC9C,CAAC,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;IAC/E,OAAO,gBAAgB;AACzB;AACA,OAAO,OAAO,GAAG,iBAAiB,OAAO,OAAO,CAAC,UAAU,GAAG,IAAI,EAAE,OAAO,OAAO,CAAC,UAAU,GAAG,OAAO,OAAO;;;ACN9G;;;CAGC,GACD;AAEA,IAAI,yBAAyB,QAAQ;AAErC,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO,IAAI;AACb;AACA,OAAO,CAAC,UAAU,GAAG;AAErB,IAAI,mBAAmB,uBAAuB,QAAQ;AAEtD,IAAI,gBAAgB,uBAAuB,QAAQ;AAEnD,IAAI,aAAa,uBAAuB,QAAQ;AAEhD,IAAI,8BAA8B,uBAAuB,QAAQ;AAEjE,IAAI,mBAAmB,uBAAuB,QAAQ;AAEtD,IAAI,gBAAgB,QAAQ;AAE5B,SAAS,aAAa,OAAO,EAAE;IAAE,IAAI,4BAA4B;IAA6B,OAAO,SAAS,uBAAuB;QAAE,IAAI,QAAQ,AAAC,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,UAAU;QAAQ,IAAI,2BAA2B;YAAE,IAAI,YAAY,AAAC,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE,WAAW;YAAE,SAAS,QAAQ,SAAS,CAAC,OAAO,WAAW;QAAY,OAAS,SAAS,MAAM,KAAK,CAAC,IAAI,EAAE;QAAc,OAAO,AAAC,CAAA,GAAG,2BAA2B,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE;IAAS;AAAG;AAE3d,SAAS,4BAA4B;IAAE,IAAI,OAAO,YAAY,eAAe,CAAC,QAAQ,SAAS,EAAE,OAAO,KAAK;IAAE,IAAI,QAAQ,SAAS,CAAC,IAAI,EAAE,OAAO,KAAK;IAAE,IAAI,OAAO,UAAU,YAAY,OAAO,IAAI;IAAE,IAAI;QAAE,QAAQ,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,SAAS,CAAC,SAAS,EAAE,EAAE,WAAY,CAAC;QAAK,OAAO,IAAI;IAAE,EAAE,OAAO,GAAG;QAAE,OAAO,KAAK;IAAE;AAAE;AAExU,IAAI,uBAAuB,WAAW,GAAE,SAAU,aAAa,EAAE;IAC9D,CAAA,GAAG,UAAU,CAAC,UAAU,AAAD,EAAG,sBAAsB;IAEjD,IAAI,SAAS,aAAa;IAE1B;;;;;;GAMC,GACD,SAAS,qBAAqB,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE;QACzD,IAAI;QAEH,CAAA,GAAG,gBAAgB,CAAC,UAAU,AAAD,EAAG,IAAI,EAAE;QACvC,QAAQ,OAAO,IAAI,CAAC,IAAI;QACxB,MAAM,MAAM,GAAG,IAAI,OAAO,SAAS,CAAC,SAAS;QAE7C,MAAM,MAAM,CAAC,MAAM,GAAG,WAAY;YAChC,OAAO,MAAM,IAAI,CAAC;QACpB;QAEA,MAAM,MAAM,CAAC,SAAS,GAAG,SAAU,KAAK,EAAE;YACxC,OAAO,MAAM,IAAI,CAAC,WAAW,MAAM,IAAI;QACzC;QAEA,MAAM,MAAM,CAAC,OAAO,GAAG,SAAU,KAAK,EAAE;YACtC,OAAO,MAAM,IAAI,CAAC,SAAS;QAC7B;QAEA,MAAM,MAAM,CAAC,OAAO,GAAG,SAAU,KAAK,EAAE;YACtC,MAAM,IAAI,CAAC,SAAS,MAAM,IAAI,EAAE,MAAM,MAAM;QAC9C;QAEA,OAAO;IACT;IACA;;;;;;;GAOC,GAGA,CAAA,GAAG,aAAa,CAAC,UAAU,AAAD,EAAG,sBAAsB;QAAC;YACnD,KAAK;YACL,OAAO,SAAS,KAAK,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE;gBACtD,IAAI,KAAK,YAAY;gBAErB,IAAI;oBACF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;oBACjB;gBACF,EAAE,OAAO,OAAO;oBACd,GAAG;gBACL;YACF;QAUF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,MAAM,IAAI,EAAE,MAAM,EAAE;gBAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM;YAC1B;QACF;QAAG;YACD,KAAK;YACL,OAAO,SAAS,iBAAiB,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE;gBACxD,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,UAAU;YAC/C;QACF;KAAE;IACF,OAAO;AACT,EAAE,cAAc,YAAY;AAC5B;;;;;;CAMC,GAGD,SAAS,SAAS,OAAO,EAAE,OAAO,EAAE;IAClC,OAAO,IAAI,qBAAqB,SAAS;AAC3C;;;A;A,O,c,C,S,c;I,O,I;A;A,Q,Q,G,Q,Q,G,Q,U,G,Q,U,G,Q,U,G,Q,U,G,Q,Q,G,Q,Q,G,Q,Q,G,Q,Q,G,Q,M,G,Q,O,G,K;AEzHA,MAAA,eAAA,QAAA;AACA,MAAA,YAAA,QAAA;AACA,MAAA,aAAA,QAAA;AAUA,2CAA2C;AAC3C,MAAM,CAAC,SAAS,WAAW,WAAW,GAAmC;IAAC,EAAE;IAAE,EAAE;IAAE,EAAE;CAAC;AACrF,MAAM,MAAM,OAAO;AACnB,MAAM,MAAM,OAAO;AACnB,MAAM,MAAM,OAAO;AACnB,MAAM,MAAM,OAAO;AACnB,MAAM,QAAQ,OAAO;AACrB,MAAM,SAAS,OAAO;AACtB,IAAK,IAAI,QAAQ,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,QAAQ,IAAI,QAAS;IAC9D,KAAK;IACL,CAAC,GAAG,EAAE,GAAG;QAAC;QAAI,CAAA,IAAI,IAAI,IAAI,CAAA,IAAK;KAAE;IACjC,QAAQ,IAAI,CAAC,IAAK,CAAA,IAAI,IAAI,CAAA;IAC1B,aAAa;IACb,UAAU,IAAI,CAAC,AAAG,CAAA,QAAQ,CAAA,IAAM,CAAA,QAAQ,CAAA,IAAM,IAAK;IACnD,OAAO;IACP,IAAI,IAAI;IACR,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,IAAK;QAC1B,IAAI,AAAC,CAAA,AAAC,KAAK,MAAQ,AAAC,CAAA,KAAK,GAAA,IAAO,MAAM,IAAK;QAC3C,IAAI,IAAI,KAAK,KAAK,OAAQ,AAAC,CAAA,OAAO,OAAO,EAAC,IAAK;IAChD;IACD,WAAW,IAAI,CAAC;AACjB;AACD,MAAM,CAAC,aAAa,YAAY,GAAG,UAAA,OAAG,CAAC,KAAK,CAAC,YAAY,IAAI;AAE7D,oCAAoC;AACpC,MAAM,QAAQ,CAAC,GAAW,GAAW,IACnC,IAAI,KAAK,UAAA,OAAG,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,UAAA,OAAG,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE;AACpD,MAAM,QAAQ,CAAC,GAAW,GAAW,IACnC,IAAI,KAAK,UAAA,OAAG,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,UAAA,OAAG,CAAC,MAAM,CAAC,GAAG,GAAG,EAAE;AAEpD,sDAAsD;AACtD,SAAgB,QAAQ,CAAc,EAAE,SAAiB,EAAE,EAA3D;IACE,MAAM,IAAI,IAAI,YAAY;IAC1B,8FAA8F;IAC9F,IAAK,IAAI,QAAQ,KAAK,QAAQ,QAAQ,IAAI,QAAS;QACjD,UAAU;QACV,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,IAAI,GAAG;QACxF,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,EAAG;YAC9B,MAAM,OAAO,AAAC,CAAA,IAAI,CAAA,IAAK;YACvB,MAAM,OAAO,AAAC,CAAA,IAAI,CAAA,IAAK;YACvB,MAAM,KAAK,CAAC,CAAC,KAAK;YAClB,MAAM,KAAK,CAAC,CAAC,OAAO,EAAE;YACtB,MAAM,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK;YACrC,MAAM,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,CAAC,OAAO,EAAE;YACzC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,GAAI;gBAC/B,CAAC,CAAC,IAAI,EAAE,IAAI;gBACZ,CAAC,CAAC,IAAI,IAAI,EAAE,IAAI;YACjB;QACF;QACD,qBAAqB;QACrB,IAAI,OAAO,CAAC,CAAC,EAAE;QACf,IAAI,OAAO,CAAC,CAAC,EAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK;YAC3B,MAAM,QAAQ,SAAS,CAAC,EAAE;YAC1B,MAAM,KAAK,MAAM,MAAM,MAAM;YAC7B,MAAM,KAAK,MAAM,MAAM,MAAM;YAC7B,MAAM,KAAK,OAAO,CAAC,EAAE;YACrB,OAAO,CAAC,CAAC,GAAG;YACZ,OAAO,CAAC,CAAC,KAAK,EAAE;YAChB,CAAC,CAAC,GAAG,GAAG;YACR,CAAC,CAAC,KAAK,EAAE,GAAG;QACb;QACD,UAAU;QACV,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,KAAK,GAAI;YAC/B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE;YAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,IAAK,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,AAAC,CAAA,IAAI,CAAA,IAAK,GAAG,GAAG,CAAC,CAAC,AAAC,CAAA,IAAI,CAAA,IAAK,GAAG;QAC5E;QACD,WAAW;QACX,CAAC,CAAC,EAAE,IAAI,WAAW,CAAC,MAAM;QAC1B,CAAC,CAAC,EAAE,IAAI,WAAW,CAAC,MAAM;IAC3B;IACD,EAAE,IAAI,CAAC;AACT;AAzCA,QAAA,OAAA,GAAA;AA2CA,MAAa,eAAe,WAAA,IAAY;IAOtC,2DAA2D;IAC3D,YACS,QAAgB,EAChB,MAAc,EACd,SAAiB,EACd,YAAY,KAAK,EACjB,SAAiB,EAAE,CAL/B;QAOE,KAAK;QANE,IAAA,CAAA,QAAQ,GAAR;QACA,IAAA,CAAA,MAAM,GAAN;QACA,IAAA,CAAA,SAAS,GAAT;QACG,IAAA,CAAA,SAAS,GAAT;QACA,IAAA,CAAA,MAAM,GAAN;QAXF,IAAA,CAAA,GAAG,GAAG;QACN,IAAA,CAAA,MAAM,GAAG;QACT,IAAA,CAAA,QAAQ,GAAG,KAAK;QAEhB,IAAA,CAAA,SAAS,GAAG,KAAK;QAUzB,mCAAmC;QACnC,aAAA,OAAM,CAAC,MAAM,CAAC;QACd,uDAAuD;QACvD,IAAI,KAAK,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,KACzC,MAAM,IAAI,MAAM,4CAA4C;QAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW;QAC5B,IAAI,CAAC,OAAO,GAAG,AAAA,CAAA,GAAA,WAAA,GAAG,AAAH,EAAI,IAAI,CAAC,KAAK;IAC/B;IACU,SAAA;QACR,QAAQ,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM;QACjC,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,GAAG,GAAG;IACb;IACA,OAAO,IAAW,EAAlB;QACE,aAAA,OAAM,CAAC,MAAM,CAAC,IAAI;QAClB,MAAM,EAAE,SAAQ,EAAE,MAAK,EAAE,GAAG,IAAI;QAChC,OAAO,AAAA,CAAA,GAAA,WAAA,OAAO,AAAP,EAAQ;QACf,MAAM,MAAM,KAAK,MAAM;QACvB,IAAK,IAAI,MAAM,GAAG,MAAM,KAAO;YAC7B,MAAM,OAAO,KAAK,GAAG,CAAC,WAAW,IAAI,CAAC,GAAG,EAAE,MAAM;YACjD,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,IAAK,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,MAAM;YAC/D,IAAI,IAAI,CAAC,GAAG,KAAK,UAAU,IAAI,CAAC,MAAM;QACvC;QACD,OAAO,IAAI;IACb;IACU,SAAA;QACR,IAAI,IAAI,CAAC,QAAQ,EAAE;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI;QACpB,MAAM,EAAE,MAAK,EAAE,OAAM,EAAE,IAAG,EAAE,SAAQ,EAAE,GAAG,IAAI;QAC7C,iBAAiB;QACjB,KAAK,CAAC,IAAI,IAAI;QACd,IAAI,AAAC,CAAA,SAAS,IAAA,MAAU,KAAK,QAAQ,WAAW,GAAG,IAAI,CAAC,MAAM;QAC9D,KAAK,CAAC,WAAW,EAAE,IAAI;QACvB,IAAI,CAAC,MAAM;IACb;IACU,UAAU,GAAe,EAAzB;QACR,aAAA,OAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK;QACzB,aAAA,OAAM,CAAC,KAAK,CAAC;QACb,IAAI,CAAC,MAAM;QACX,MAAM,YAAY,IAAI,CAAC,KAAK;QAC5B,MAAM,EAAE,SAAQ,EAAE,GAAG,IAAI;QACzB,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,MAAM,EAAE,MAAM,KAAO;YAC/C,IAAI,IAAI,CAAC,MAAM,IAAI,UAAU,IAAI,CAAC,MAAM;YACxC,MAAM,OAAO,KAAK,GAAG,CAAC,WAAW,IAAI,CAAC,MAAM,EAAE,MAAM;YACpD,IAAI,GAAG,CAAC,UAAU,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,OAAO;YAC7D,IAAI,CAAC,MAAM,IAAI;YACf,OAAO;QACR;QACD,OAAO;IACT;IACA,QAAQ,GAAe,EAAvB;QACE,kFAAkF;QAClF,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,IAAI,MAAM,yCAAyC;QAC9E,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB;IACA,IAAI,KAAa,EAAjB;QACE,aAAA,OAAM,CAAC,MAAM,CAAC;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,WAAW;IACrC;IACA,WAAW,GAAe,EAA1B;QACE,aAAA,OAAM,CAAC,MAAM,CAAC,KAAK,IAAI;QACvB,IAAI,IAAI,CAAC,QAAQ,EAAE,MAAM,IAAI,MAAM,+BAA+B;QAClE,IAAI,CAAC,SAAS,CAAC;QACf,IAAI,CAAC,OAAO;QACZ,OAAO;IACT;IACA,SAAA;QACE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,WAAW,IAAI,CAAC,SAAS;IACtD;IACA,UAAA;QACE,IAAI,CAAC,SAAS,GAAG,IAAI;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAClB;IACA,WAAW,EAAW,EAAtB;QACE,MAAM,EAAE,SAAQ,EAAE,OAAM,EAAE,UAAS,EAAE,OAAM,EAAE,UAAS,EAAE,GAAG,IAAI;QAC/D,MAAA,CAAA,KAAO,IAAI,OAAO,UAAU,QAAQ,WAAW,WAAW,OAAM;QAChE,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO;QAC3B,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG;QACjB,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM;QACvB,GAAG,QAAQ,GAAG,IAAI,CAAC,QAAQ;QAC3B,GAAG,MAAM,GAAG;QACZ,8BAA8B;QAC9B,GAAG,MAAM,GAAG;QACZ,GAAG,SAAS,GAAG;QACf,GAAG,SAAS,GAAG;QACf,GAAG,SAAS,GAAG,IAAI,CAAC,SAAS;QAC7B,OAAO;IACT;AACD;AAxGD,QAAA,MAAA,GAAA;AA0GA,MAAM,MAAM,CAAC,QAAgB,UAAkB,YAC7C,AAAA,CAAA,GAAA,WAAA,eAAe,AAAf,EAAgB,IAAM,IAAI,OAAO,UAAU,QAAQ;AAExC,QAAA,QAAQ,GAAG,IAAI,MAAM,KAAK;AACvC;;;CAGG,GACU,QAAA,QAAQ,GAAG,IAAI,MAAM,KAAK;AAC1B,QAAA,QAAQ,GAAG,IAAI,MAAM,KAAK;AAC1B,QAAA,QAAQ,GAAG,IAAI,MAAM,IAAI;AACzB,QAAA,UAAU,GAAG,IAAI,MAAM,KAAK;AACzC;;;CAGG,GACU,QAAA,UAAU,GAAG,IAAI,MAAM,KAAK;AAC5B,QAAA,UAAU,GAAG,IAAI,MAAM,KAAK;AAC5B,QAAA,UAAU,GAAG,IAAI,MAAM,IAAI;AAIxC,MAAM,WAAW,CAAC,QAAgB,UAAkB,YAClD,AAAA,CAAA,GAAA,WAAA,uBAAuB,AAAvB,EACE,CAAC,OAAkB,CAAA,CAAE,GACnB,IAAI,OAAO,UAAU,QAAQ,KAAK,KAAK,KAAK,YAAY,YAAY,KAAK,KAAK,EAAE,IAAI;AAG7E,QAAA,QAAQ,GAAG,SAAS,MAAM,KAAK;AAC/B,QAAA,QAAQ,GAAG,SAAS,MAAM,KAAK;;;A;A,O,c,C,S,c;I,O,I;A;A,Q,I,G,K;AE7N5C,MAAA,eAAA,QAAA;AACA,MAAA,aAAA,QAAA;AACA,kBAAkB;AAClB,MAAM,aAAgC,WAAA,IAAa;IAQjD,YAAY,IAAW,EAAE,IAAW,CAApC;QACE,KAAK;QAJC,IAAA,CAAA,QAAQ,GAAG,KAAK;QAChB,IAAA,CAAA,SAAS,GAAG,KAAK;QAIvB,aAAA,OAAM,CAAC,IAAI,CAAC;QACZ,MAAM,MAAM,AAAA,CAAA,GAAA,WAAA,OAAO,AAAP,EAAQ;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,MAAM;QACxB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,YAC/B,MAAM,IAAI,UAAU,uDAAuD;QAC7E,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ;QACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS;QACrC,MAAM,WAAW,IAAI,CAAC,QAAQ;QAC9B,MAAM,MAAM,IAAI,WAAW;QAC3B,wCAAwC;QACxC,IAAI,GAAG,CAAC,IAAI,MAAM,GAAG,WAAW,KAAK,MAAM,GAAG,MAAM,CAAC,KAAK,MAAM,KAAK,GAAG;QACxE,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK,GAAG,CAAC,EAAE,IAAI;QAC/C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,mHAAmH;QACnH,IAAI,CAAC,KAAK,GAAG,KAAK,MAAM;QACxB,uCAAuC;QACvC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK,GAAG,CAAC,EAAE,IAAI;QAC/C,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,IAAI,IAAI,CAAC;IACX;IACA,OAAO,GAAU,EAAjB;QACE,aAAA,OAAM,CAAC,MAAM,CAAC,IAAI;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,OAAO,IAAI;IACb;IACA,WAAW,GAAe,EAA1B;QACE,aAAA,OAAM,CAAC,MAAM,CAAC,IAAI;QAClB,aAAA,OAAM,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,SAAS;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI;QACpB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QACtB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAClB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;QACtB,IAAI,CAAC,OAAO;IACd;IACA,SAAA;QACE,MAAM,MAAM,IAAI,WAAW,IAAI,CAAC,KAAK,CAAC,SAAS;QAC/C,IAAI,CAAC,UAAU,CAAC;QAChB,OAAO;IACT;IACA,WAAW,EAAY,EAAvB;QACE,mGAAmG;QACnG,MAAA,CAAA,KAAO,OAAO,MAAM,CAAC,OAAO,cAAc,CAAC,IAAI,GAAG,CAAA,EAAE;QACpD,MAAM,EAAE,MAAK,EAAE,MAAK,EAAE,SAAQ,EAAE,UAAS,EAAE,SAAQ,EAAE,UAAS,EAAE,GAAG,IAAI;QAClE;QACL,GAAG,QAAQ,GAAG;QACd,GAAG,SAAS,GAAG;QACf,GAAG,QAAQ,GAAG;QACd,GAAG,SAAS,GAAG;QACf,GAAG,KAAK,GAAG,MAAM,UAAU,CAAC,GAAG,KAAK;QACpC,GAAG,KAAK,GAAG,MAAM,UAAU,CAAC,GAAG,KAAK;QACpC,OAAO;IACT;IACA,UAAA;QACE,IAAI,CAAC,SAAS,GAAG,IAAI;QACrB,IAAI,CAAC,KAAK,CAAC,OAAO;QAClB,IAAI,CAAC,KAAK,CAAC,OAAO;IACpB;AACD;AAED;;;;;CAKG,GACI,MAAM,OAAO,CAAC,MAAa,KAAY,UAC5C,IAAI,KAAU,MAAM,KAAK,MAAM,CAAC,SAAS,MAAM;AADpC,QAAA,IAAI,GAAA;AAEjB,QAAA,IAAI,CAAC,MAAM,GAAG,CAAC,MAAa,MAAe,IAAI,KAAU,MAAM","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-53c2c9f1dc71f1f3.js","node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js","node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","node_modules/@web3auth/solana-provider/src/solanaWallet.ts","node_modules/bs58/index.js","node_modules/base-x/src/index.js","node_modules/@solana/web3.js/lib/index.browser.esm.js","node_modules/@solana/web3.js/src/utils/ed25519.ts","node_modules/@solana/web3.js/src/utils/to-buffer.ts","node_modules/@solana/web3.js/src/utils/borsh-schema.ts","node_modules/@solana/web3.js/src/publickey.ts","node_modules/@solana/web3.js/src/account.ts","node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","node_modules/@solana/web3.js/src/transaction/constants.ts","node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","node_modules/@solana/web3.js/src/message/account-keys.ts","node_modules/@solana/web3.js/src/layout.ts","node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","node_modules/@solana/web3.js/src/utils/assert.ts","node_modules/@solana/web3.js/src/message/compiled-keys.ts","node_modules/@solana/web3.js/src/message/legacy.ts","node_modules/@solana/web3.js/src/message/v0.ts","node_modules/@solana/web3.js/src/message/versioned.ts","node_modules/@solana/web3.js/src/transaction/legacy.ts","node_modules/@solana/web3.js/src/transaction/message.ts","node_modules/@solana/web3.js/src/transaction/versioned.ts","node_modules/@solana/web3.js/src/sysvar.ts","node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","node_modules/@solana/web3.js/src/utils/sleep.ts","node_modules/@solana/web3.js/src/instruction.ts","node_modules/@solana/web3.js/src/fee-calculator.ts","node_modules/@solana/web3.js/src/nonce-account.ts","node_modules/@solana/web3.js/src/utils/bigint.ts","node_modules/@solana/web3.js/src/programs/system.ts","node_modules/@solana/web3.js/src/loader.ts","node_modules/@solana/web3.js/src/bpf-loader.ts","node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","node_modules/@solana/web3.js/src/epoch-schedule.ts","node_modules/@solana/web3.js/src/errors.ts","node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","node_modules/@solana/web3.js/src/rpc-websocket.ts","node_modules/@solana/web3.js/src/timing.ts","node_modules/@solana/web3.js/src/account-data.ts","node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","node_modules/@solana/web3.js/src/connection.ts","node_modules/@solana/web3.js/src/keypair.ts","node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","node_modules/@solana/web3.js/src/programs/compute-budget.ts","node_modules/@solana/web3.js/src/programs/ed25519.ts","node_modules/@solana/web3.js/src/utils/secp256k1.ts","node_modules/@solana/web3.js/src/programs/secp256k1.ts","node_modules/@solana/web3.js/src/programs/stake.ts","node_modules/@solana/web3.js/src/programs/vote.ts","node_modules/@solana/web3.js/src/validator-info.ts","node_modules/@solana/web3.js/src/vote-account.ts","node_modules/@solana/web3.js/src/utils/cluster.ts","node_modules/@solana/web3.js/src/utils/send-and-confirm-raw-transaction.ts","node_modules/@solana/web3.js/src/index.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/sha512.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha512.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/_sha2.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_sha2.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/_assert.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_assert.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/utils.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/utils.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/crypto.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/crypto.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/_u64.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_u64.ts","node_modules/@noble/ed25519/lib/esm/index.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/sha256.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha256.ts","node_modules/borsh/lib/index.js","node_modules/text-encoding-utf-8/lib/encoding.lib.js","node_modules/@solana/buffer-layout/lib/Layout.js","node_modules/@solana/buffer-layout/src/Layout.ts","node_modules/bigint-buffer/dist/browser.js","node_modules/superstruct/lib/index.es.js","node_modules/superstruct/src/error.ts","node_modules/superstruct/src/utils.ts","node_modules/superstruct/src/struct.ts","node_modules/superstruct/src/structs/utilities.ts","node_modules/superstruct/src/structs/types.ts","node_modules/superstruct/src/structs/coercions.ts","node_modules/superstruct/src/structs/refinements.ts","node_modules/jayson/lib/client/browser/index.js","node_modules/uuid/dist/esm-browser/index.js","node_modules/uuid/dist/esm-browser/v1.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","node_modules/uuid/dist/esm-browser/v3.js","node_modules/uuid/dist/esm-browser/v35.js","node_modules/uuid/dist/esm-browser/parse.js","node_modules/uuid/dist/esm-browser/md5.js","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/v5.js","node_modules/uuid/dist/esm-browser/sha1.js","node_modules/uuid/dist/esm-browser/nil.js","node_modules/uuid/dist/esm-browser/version.js","node_modules/jayson/lib/generateRequest.js","node_modules/rpc-websockets/dist/lib/client.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/sha3.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha3.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/hmac.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"fc3684d26e5d9b8f\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\n\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, assetsToDispose\n/*: Array<[ParcelRequire, string]> */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets); // Dispose all old assets.\n\n        let processedAssets = {}\n        /*: {|[string]: boolean|} */\n        ;\n\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        } // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n\n\n        processedAssets = {};\n\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\n\nfunction hmrDispose(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n\n  delete bundle.cache[id];\n}\n\nfunction hmrAccept(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  // Execute the module.\n  bundle(id); // Run the accept callbacks in the new version of the module.\n\n  var cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        }); // $FlowFixMe[method-unbinding]\n\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n",null,"import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length -\n      numRequiredSignatures -\n      numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n  DurableNonceTransactionConfirmationStrategy,\n  TransactionConfirmationStrategy,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {TransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: TransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | TransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy: TransactionConfirmationStrategy | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'nonceValue',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as DurableNonceTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n",null,null,null,null,null,null,null,null,null,null,null,null,"/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n",null,null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;",null,null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n",null,"/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import { Struct, Refiner } from '../struct'\nimport { toFailures } from '../utils'\n\n/**\n * Ensure that a string, array, map, or set is empty.\n */\n\nexport function empty<\n  T extends string | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>): Struct<T, S> {\n  const expected = `Expected an empty ${struct.type}`\n\n  return refine(struct, 'empty', (value) => {\n    if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        size === 0 || `${expected} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        length === 0 ||\n        `${expected} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Ensure that a number or date is below a threshold.\n */\n\nexport function max<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'max', (value) => {\n    return exclusive\n      ? value < threshold\n      : value <= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n\n/**\n * Ensure that a number or date is above a threshold.\n */\n\nexport function min<T extends number | Date, S extends any>(\n  struct: Struct<T, S>,\n  threshold: T,\n  options: {\n    exclusive?: boolean\n  } = {}\n): Struct<T, S> {\n  const { exclusive } = options\n  return refine(struct, 'min', (value) => {\n    return exclusive\n      ? value > threshold\n      : value >= threshold ||\n          `Expected a ${struct.type} greater than ${\n            exclusive ? '' : 'or equal to '\n          }${threshold} but received \\`${value}\\``\n  })\n}\n/**\n * Ensure that a string matches a regular expression.\n */\n\nexport function pattern<T extends string, S extends any>(\n  struct: Struct<T, S>,\n  regexp: RegExp\n): Struct<T, S> {\n  return refine(struct, 'pattern', (value) => {\n    return (\n      regexp.test(value) ||\n      `Expected a ${struct.type} matching \\`/${regexp.source}/\\` but received \"${value}\"`\n    )\n  })\n}\n\n/**\n * Ensure that a string, array, number, date, map, or set has a size (or length, or time) between `min` and `max`.\n */\n\nexport function size<\n  T extends string | number | Date | any[] | Map<any, any> | Set<any>,\n  S extends any\n>(struct: Struct<T, S>, min: number, max: number = min): Struct<T, S> {\n  const expected = `Expected a ${struct.type}`\n  const of = min === max ? `of \\`${min}\\`` : `between \\`${min}\\` and \\`${max}\\``\n\n  return refine(struct, 'size', (value) => {\n    if (typeof value === 'number' || value instanceof Date) {\n      return (\n        (min <= value && value <= max) ||\n        `${expected} ${of} but received \\`${value}\\``\n      )\n    } else if (value instanceof Map || value instanceof Set) {\n      const { size } = value\n      return (\n        (min <= size && size <= max) ||\n        `${expected} with a size ${of} but received one with a size of \\`${size}\\``\n      )\n    } else {\n      const { length } = value as string | any[]\n      return (\n        (min <= length && length <= max) ||\n        `${expected} with a length ${of} but received one with a length of \\`${length}\\``\n      )\n    }\n  })\n}\n\n/**\n * Augment a `Struct` to add an additional refinement to the validation.\n *\n * The refiner function is guaranteed to receive a value of the struct's type,\n * because the struct's existing validation will already have passed. This\n * allows you to layer additional validation on top of existing structs.\n */\n\nexport function refine<T, S>(\n  struct: Struct<T, S>,\n  name: string,\n  refiner: Refiner<T>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    *refiner(value, ctx) {\n      yield* struct.refiner(value, ctx)\n      const result = refiner(value, ctx)\n      const failures = toFailures(result, ctx, struct, value)\n\n      for (const failure of failures) {\n        yield { ...failure, refinement: name }\n      }\n    },\n  })\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import v35 from './v35.js';\nimport md5 from './md5.js';\nvar v3 = v35('v3', 0x30, md5);\nexport default v3;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  var bytes = [];\n\n  for (var i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    var bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (var i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  var v;\n  var arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  var output = [];\n  var length32 = input.length * 32;\n  var hexTab = '0123456789abcdef';\n\n  for (var i = 0; i < length32; i += 8) {\n    var x = input[i >> 5] >>> i % 32 & 0xff;\n    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  var length8 = input.length * 8;\n  var output = new Uint32Array(getOutputLength(length8));\n\n  for (var i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nexport default md5;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nvar v5 = v35('v5', 0x50, sha1);\nexport default v5;","// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (var i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  var l = bytes.length / 4 + 2;\n  var N = Math.ceil(l / 16);\n  var M = new Array(N);\n\n  for (var _i = 0; _i < N; ++_i) {\n    var arr = new Uint32Array(16);\n\n    for (var j = 0; j < 16; ++j) {\n      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];\n    }\n\n    M[_i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (var _i2 = 0; _i2 < N; ++_i2) {\n    var W = new Uint32Array(80);\n\n    for (var t = 0; t < 16; ++t) {\n      W[t] = M[_i2][t];\n    }\n\n    for (var _t = 16; _t < 80; ++_t) {\n      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);\n    }\n\n    var a = H[0];\n    var b = H[1];\n    var c = H[2];\n    var d = H[3];\n    var e = H[4];\n\n    for (var _t2 = 0; _t2 < 80; ++_t2) {\n      var s = Math.floor(_t2 / 20);\n      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nexport default sha1;","export default '00000000-0000-0000-0000-000000000000';","import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}",null,null,null,null],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","createAccountMiddleware","_ref4","updatePrivatekey","BaseInjectedProvider","BaseProvider","constructor","config","state","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","SOLANA","switchChain","_","WalletLoginError","unsupportedOperation","setupProvider","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getBaseProviderHandlers","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","transaction","params","message","sigData","display","signature","_req$params","_req$params2","length","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","isVersionTransction","version","VersionedTransaction","getSlopeHandlers","getProviderEngineProxy","data","connect","txMessage","invalidRequest","serialize","serializeMessage","PublicKey","decode","addSignature","Buffer","from","custom","code","conn","Connection","sendRawTransaction","_data$signatures","allTxns","unsignedTx","i","item","msg","signatures","SlopeInjectedProxyProvider","bind","getSolflareHandlers","solflareProviderHandlers","SolflareInjectedProvider","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","addChain","chainName","displayName","rpcUrls","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","toString","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","privKey","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","secretKey","sign","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","encoding","preflightCommitment","_req$params6","txns","tx","SolanaPrivateKeyProvider","enable","privateKey","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","existingKey","getChainConfig","health","chainSwitchHandlers","chainSwitchMiddleware","accountHandlers","providerFactory","SolanaWallet","_defineProperty","signedTransaction","signedTransactions","args","ed25519","utils","sha512Sync","m","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","getPublicKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","slice","verify","toBuffer","arr","isBuffer","buffer","byteOffset","byteLength","Struct","properties","Object","assign","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","uniquePublicKeyCounter","Symbol","toStringTag","decoded","BN","unique","equals","eq","toJSON","buf","b","toArrayLike","zeroPad","alloc","copy","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","_addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","commitment","maxRetries","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","customMessage","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","webSocketFactory","url","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","httpHeaders","customFetch","disableRetryOnRateLimit","httpAgent","fetchImpl","agent","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","clientBrowser","RpcClient","callback","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify","unsafeRes","wsEndpoint","confirmTransactionInitialTimeout","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","aborted","reason","decodedSignature","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","abortConfirmation","removeSignatureListener","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","close","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","keypair","_keypair","generate","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","digest","ecdsaSign","msgHash","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL","StructError","failure","failures","cached","path","isIterable","isObject","iterator","isPlainObject","getPrototypeOf","print","shiftIterator","input","toFailure","branch","refinement","toFailures","r","run","mask","ctx","coercer","k","v","s","ts","t","refiner","props","is","validate","tuples","Structs","schemas","object","define","deprecated","dynamic","fn","lazy","omit","subschema","partial","Element","date","isNaN","getTime","enums","description","func","Class","integer","isInteger","intersection","S","constant","Key","Value","never","knowns","Never","unknowns","regexp","RegExp","Elements","max","first","defaulted","fallback","f","strict","ret","changed","trimmed","trim","empty","expected","refine","threshold","exclusive","min","pattern","of"],"version":3,"file":"solanaProvider.esm.6e5d9b8f.js.map","sourceRoot":"/__parcel_source_root/"}
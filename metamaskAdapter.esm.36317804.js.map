{"mappings":"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","sources":["node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts","node_modules/@metamask/detect-provider/src/index.ts","node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts"],"sourcesContent":["import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.addChain(this.chainConfig as CustomChainConfig, true);\n        await this.switchChain(this.chainConfig as CustomChainConfig, true);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      const disconnectHandler = () => {\n        // ready to be connected again\n        this.disconnect();\n        this.provider?.removeListener(\"disconnect\", disconnectHandler);\n      };\n      this.provider.on(\"disconnect\", disconnectHandler);\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if (error instanceof Web3AuthError) throw error;\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.metamaskProvider?.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: params.chainId }],\n    });\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n}\n\nexport { MetamaskAdapter };\n","interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        signedMessage as string,\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n"],"names":["MetamaskAdapter","BaseEvmAdapter","constructor","super","arguments","_defineProperty","this","ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","provider","status","CONNECTED","metamaskProvider","_","Error","async","options","length","undefined","init","checkInitializationRequirements","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","notInstalled","READY","emit","ADAPTER_EVENTS","log","debug","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","WalletLoginError","notConnectedError","CONNECTING","adapter","request","method","chainId","chainConfig","addChain","switchChain","disconnectHandler","_this$provider","disconnect","removeListener","on","reconnected","Web3AuthError","connectionError","_this$provider2","cleanup","disconnectSession","removeAllListeners","_this$metamaskProvide","checkAddChainRequirements","params","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","addChainConfig","_this$metamaskProvide2","checkSwitchChainRequirements","setAdapterSettings","getChainConfig","module","exports","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","addEventListener","once","setTimeout","BaseAdapter","chainNamespace","accounts","existingToken","getSavedToken","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","signedMessage","verifySignedChallenge","sessionTime","clientId","web3AuthNetwork","saveToken","checkDisconnectionRequirements","clearToken","DISCONNECTED"],"version":3,"file":"metamaskAdapter.esm.36317804.js.map"}
function e(e){return e&&e.__esModule?e.default:e}function t(e,t,i,n){Object.defineProperty(e,t,{get:i,set:n,enumerable:!0,configurable:!0})}var i=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire8d7b;i.register("3HZvg",(function(n,r){t(n.exports,"MetamaskAdapter",(()=>c));var a=i("g5Zhu"),o=i("dfTyR"),s=i("gfWQS"),h=i("h6Gj8");class c extends h.BaseEvmAdapter{constructor(){super(...arguments),e(a)(this,"adapterNamespace",s.ADAPTER_NAMESPACES.EIP155),e(a)(this,"currentChainNamespace",s.CHAIN_NAMESPACES.EIP155),e(a)(this,"type",s.ADAPTER_CATEGORY.EXTERNAL),e(a)(this,"name",s.WALLET_ADAPTERS.METAMASK),e(a)(this,"status",s.ADAPTER_STATUS.NOT_READY),e(a)(this,"metamaskProvider",null)}get provider(){return this.status===s.ADAPTER_STATUS.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(e){throw new Error("Not implemented")}async init(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(await super.init(t),super.checkInitializationRequirements(),this.metamaskProvider=await e(o)({mustBeMetaMask:!0}),!this.metamaskProvider)throw s.WalletInitializationError.notInstalled("Metamask extension is not installed");this.status=s.ADAPTER_STATUS.READY,this.emit(s.ADAPTER_EVENTS.READY,s.WALLET_ADAPTERS.METAMASK);try{s.log.debug("initializing metamask adapter"),t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(s.ADAPTER_EVENTS.ERRORED,e)}}async connect(){if(super.checkConnectionRequirements(),!this.metamaskProvider)throw s.WalletLoginError.notConnectedError("Not able to connect with metamask");this.status=s.ADAPTER_STATUS.CONNECTING,this.emit(s.ADAPTER_EVENTS.CONNECTING,{adapter:s.WALLET_ADAPTERS.METAMASK});try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:e}=this.metamaskProvider;if(e!==this.chainConfig.chainId&&(await this.addChain(this.chainConfig,!0),await this.switchChain(this.chainConfig,!0)),this.status=s.ADAPTER_STATUS.CONNECTED,!this.provider)throw s.WalletLoginError.notConnectedError("Failed to connect with provider");const t=()=>{var e;this.disconnect(),null===(e=this.provider)||void 0===e||e.removeListener("disconnect",t)};return this.provider.on("disconnect",t),this.emit(s.ADAPTER_EVENTS.CONNECTED,{adapter:s.WALLET_ADAPTERS.METAMASK,reconnected:this.rehydrated}),this.provider}catch(e){if(this.status=s.ADAPTER_STATUS.READY,this.rehydrated=!1,this.emit(s.ADAPTER_EVENTS.ERRORED,e),e instanceof s.Web3AuthError)throw e;throw s.WalletLoginError.connectionError("Failed to login with metamask wallet")}}async disconnect(){var e;let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnectSession(),null===(e=this.provider)||void 0===e||e.removeAllListeners(),t.cleanup?(this.status=s.ADAPTER_STATUS.NOT_READY,this.metamaskProvider=null):this.status=s.ADAPTER_STATUS.READY,await super.disconnect()}async getUserInfo(){if(this.status!==s.ADAPTER_STATUS.CONNECTED)throw s.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async addChain(e){var t;let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkAddChainRequirements(i),await(null===(t=this.metamaskProvider)||void 0===t?void 0:t.request({method:"wallet_addEthereumChain",params:[{chainId:e.chainId,chainName:e.displayName,rpcUrls:[e.rpcTarget],blockExplorerUrls:[e.blockExplorer],nativeCurrency:{name:e.tickerName,symbol:e.ticker,decimals:e.decimals||18}}]})),this.addChainConfig(e)}async switchChain(e){var t;let i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.checkSwitchChainRequirements(e,i),await(null===(t=this.metamaskProvider)||void 0===t?void 0:t.request({method:"wallet_switchEthereumChain",params:[{chainId:e.chainId}]})),this.setAdapterSettings({chainConfig:this.getChainConfig(e.chainId)})}}})),i.register("dfTyR",(function(e,t){e.exports=function({mustBeMetaMask:e=!1,silent:t=!1,timeout:i=3e3}={}){!function(){if("boolean"!=typeof e)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof t)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof i)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let n=!1;return new Promise((r=>{function a(){if(n)return;n=!0,window.removeEventListener("ethereum#initialized",a);const{ethereum:i}=window;if(!i||e&&!i.isMetaMask){const n=e&&i?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!t&&console.error("@metamask/detect-provider:",n),r(null)}else r(i)}window.ethereum?a():(window.addEventListener("ethereum#initialized",a,{once:!0}),setTimeout((()=>{a()}),i))}))}})),i.register("h6Gj8",(function(e,n){t(e.exports,"BaseEvmAdapter",(()=>a));var r=i("gfWQS");class a extends r.BaseAdapter{async init(e){this.chainConfig||(this.chainConfig=(0,r.getChainConfig)(r.CHAIN_NAMESPACES.EIP155,1))}async authenticateUser(){if(!this.provider||this.status!==r.ADAPTER_STATUS.CONNECTED)throw r.WalletLoginError.notConnectedError();const{chainNamespace:e,chainId:t}=this.chainConfig,i=await this.provider.request({method:"eth_accounts"});if(i&&i.length>0){const n=(0,r.getSavedToken)(i[0],this.name);if(n){if(!(0,r.checkIfTokenIsExpired)(n))return{idToken:n}}const a={domain:window.location.origin,uri:window.location.href,address:i[0],chainId:parseInt(t,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:(new Date).toISOString()},o=await(0,r.signChallenge)(a,e),s=await this.provider.request({method:"personal_sign",params:[o,i[0]]}),h=await(0,r.verifySignedChallenge)(e,s,o,this.name,this.sessionTime,this.clientId,this.web3AuthNetwork);return(0,r.saveToken)(i[0],this.name,h),{idToken:h}}throw r.WalletLoginError.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnectSession(){super.checkDisconnectionRequirements();const e=await this.provider.request({method:"eth_accounts"});e&&e.length>0&&(0,r.clearToken)(e[0],this.name)}async disconnect(){this.rehydrated=!1,this.emit(r.ADAPTER_EVENTS.DISCONNECTED)}}}));
//# sourceMappingURL=metamaskAdapter.esm.fd1f28e0.js.map

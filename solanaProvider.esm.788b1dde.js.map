{"mappings":"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","sources":["node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","node_modules/bs58/index.js","node_modules/base-x/src/index.js","node_modules/@solana/web3.js/src/utils/ed25519.ts","node_modules/@solana/web3.js/src/utils/to-buffer.ts","node_modules/@solana/web3.js/src/utils/borsh-schema.ts","node_modules/@solana/web3.js/src/publickey.ts","node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","node_modules/@solana/web3.js/src/transaction/constants.ts","node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","node_modules/@solana/web3.js/src/message/account-keys.ts","node_modules/@solana/web3.js/src/layout.ts","node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","node_modules/@solana/web3.js/src/utils/assert.ts","node_modules/@solana/web3.js/src/message/compiled-keys.ts","node_modules/@solana/web3.js/src/message/legacy.ts","node_modules/@solana/web3.js/src/message/v0.ts","node_modules/@solana/web3.js/src/message/versioned.ts","node_modules/@solana/web3.js/src/transaction/legacy.ts","node_modules/@solana/web3.js/src/transaction/versioned.ts","node_modules/@solana/web3.js/src/sysvar.ts","node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","node_modules/@solana/web3.js/src/utils/sleep.ts","node_modules/@solana/web3.js/src/instruction.ts","node_modules/@solana/web3.js/src/fee-calculator.ts","node_modules/@solana/web3.js/src/nonce-account.ts","node_modules/@solana/web3.js/src/utils/bigint.ts","node_modules/@solana/web3.js/src/programs/system.ts","node_modules/@solana/web3.js/src/loader.ts","node_modules/@solana/web3.js/src/bpf-loader.ts","node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","node_modules/@solana/web3.js/src/epoch-schedule.ts","node_modules/@solana/web3.js/src/errors.ts","node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","node_modules/@solana/web3.js/src/rpc-websocket.ts","node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","node_modules/@solana/web3.js/src/account-data.ts","node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","node_modules/@solana/web3.js/src/connection.ts","node_modules/@solana/web3.js/src/keypair.ts","node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","node_modules/@solana/web3.js/src/programs/compute-budget.ts","node_modules/@solana/web3.js/src/programs/ed25519.ts","node_modules/@solana/web3.js/src/utils/secp256k1.ts","node_modules/@solana/web3.js/src/programs/secp256k1.ts","node_modules/@solana/web3.js/src/programs/stake.ts","node_modules/@solana/web3.js/src/programs/vote.ts","node_modules/@solana/web3.js/src/validator-info.ts","node_modules/@solana/web3.js/src/vote-account.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha512.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_sha2.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_assert.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/utils.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/crypto.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/_u64.ts","node_modules/@noble/ed25519/lib/esm/index.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha256.ts","node_modules/borsh/lib/index.js","node_modules/text-encoding-utf-8/lib/encoding.lib.js","node_modules/@solana/buffer-layout/src/Layout.ts","node_modules/bigint-buffer/dist/browser.js","node_modules/superstruct/src/error.ts","node_modules/superstruct/src/utils.ts","node_modules/superstruct/src/struct.ts","node_modules/superstruct/src/structs/utilities.ts","node_modules/superstruct/src/structs/types.ts","node_modules/superstruct/src/structs/coercions.ts","node_modules/jayson/lib/client/browser/index.js","node_modules/uuid/dist/esm-browser/v4.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/validate.js","node_modules/uuid/dist/esm-browser/regex.js","node_modules/jayson/lib/generateRequest.js","node_modules/rpc-websockets/dist/lib/client.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/sha3.ts","node_modules/@solana/web3.js/node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    throw WalletLoginError.unsupportedOperation(\"Chain switching is not supported by this adapter\");\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    // overrides the base provider implementation\n    await this.provider.request({\n      method: \"switchSolanaChain\",\n      params: [{ chainId: params.chainId }],\n    });\n  }\n\n  public async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n    await this.provider.request({\n      method: \"addNewChainConfig\",\n      params: [\n        {\n          chainId: chainConfig.chainId,\n          chainName: chainConfig.displayName,\n          rpcUrls: [chainConfig.rpcTarget],\n          blockExplorerUrls: [chainConfig.blockExplorer],\n          nativeCurrency: {\n            name: chainConfig.tickerName,\n            symbol: chainConfig.ticker,\n            decimals: chainConfig.decimals || 18,\n          },\n        },\n      ],\n    });\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\", preflightCommitment: \"confirmed\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = this._buildArgs(accounts?.length ? [accounts] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\n\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_224 = wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new TypeError('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use `globalThis.crypto`, but node.js versions earlier than v19 don't\n// declare it in global scope. For node.js, package.json#exports field mapping\n// rewrites import from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'\n */\nexport function bytesToHex(uint8a: Uint8Array): string {\n  // pre-caching improves the speed 6x\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') {\n    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n  }\n  return new TextEncoder().encode(str);\n}\n\nexport type Input = Uint8Array | string;\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!(data instanceof Uint8Array))\n    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n  return data;\n}\n\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  if (!arrays.every((a) => a instanceof Uint8Array)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new TypeError('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashConstructor: () => Hash<T>) {\n  const hashC = (message: Input): Uint8Array => hashConstructor().update(toBytes(message)).digest();\n  const tmp = hashConstructor();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashConstructor();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","declare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _8n = BigInt(8);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.BASE;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            const offset1 = offset;\n            const offset2 = offset + Math.abs(wbits) - 1;\n            const cond1 = window % 2 !== 0;\n            const cond2 = wbits < 0;\n            if (wbits === 0) {\n                f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n            }\n            else {\n                p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        let p = this.multiplyUnsafe(CURVE.l / _2n).double();\n        if (CURVE.l % _2n)\n            p = p.add(this);\n        return p.equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ) {\n        const { x, y, z } = this;\n        const is0 = this.equals(ExtendedPoint.ZERO);\n        if (invZ == null)\n            invZ = is0 ? _8n : invert(z);\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (is0)\n            return Point.ZERO;\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;",null,"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructorWithOpts<Keccak, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"],"names":["createChainIdMiddleware","chainId","req","res","next","end","method","result","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","async","request","response","Error","accounts","undefined","createRequestAccountsMiddleware","_ref2","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","constructor","config","state","super","chainConfig","_objectSpread","chainNamespace","CHAIN_NAMESPACES","SOLANA","_","WalletLoginError","unsupportedOperation","injectedProvider","engine","JRPCEngine","solanaMiddleware","this","getProviderHandlers","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getBaseProviderHandlers","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","params","message","display","signature","_req$params","_req$params2","length","invalidParams","transaction","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","TorusInjectedProvider","addChain","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals","handleInjectedProviderUpdate","setupEngine","custom","code","connectedChainId","connectedHexChainId","isHexStrict","toString","parseInt","WalletInitializationError","rpcConnectionError","emit","txMessage","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","getTorusHandlers","on","configure","setupProvider","SolanaPrivateKeyProvider","privateKey","_providerEngineProxy","privKey","getProviderEngineProxy","keyPair","Keypair","fromSecretKey","Buffer","from","toBase58","secretKey","version","VersionedTransaction","sign","partialSign","nacl","detached","signedMsg","serialize","encoding","preflightCommitment","_req$params6","txns","tx","bind","networkMiddleware","fetchMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","createChainSwitchMiddleware","_ref3","addNewChainConfig","switchSolanaChain","switchChain","_ref4","updatePrivatekey","createAccountMiddleware","updateAccount","providerFactory","$0DhcF","parcelRequire","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","$001e77b0dfd1bf3d$require$_Buffer","alloc","psz","zeroes","size","b256","carry","it3","it4","vch","allocUnsafe","fill","Array","isArray","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","buffer","ed25519","sha512Sync","m","sha512","concatBytes","randomPrivateKey","generateKeypair","privateScalar","getPublicKey","set","isOnCurve","fromHex","slice","verify","toBuffer","arr","byteOffset","byteLength","Struct","properties","Object","assign","SOLANA_SCHEMA","static","data","deserialize","deserializeUnchecked","Map","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","$c3af9e523501759a$var$_Symbol$toStringTag","Symbol","toStringTag","PublicKey","value","_bn","isPublicKeyData","decoded","BN","key","equals","eq","toJSON","buf","b","toArrayLike","zeroPad","copy","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","seeds","forEach","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","default","kind","fields","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","map","instruction","programIdIndex","accountKeyIndexes","keys","meta","pubkey","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","offset","chars","span","getAlloc","type","getItemAlloc","item","field","elementLayout","layout","decodeLength","bytes","len","elem","shift","encodeLength","rem_len","$c3af9e523501759a$var$assert","condition","CompiledKeys","payer","keyMetaMap","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","compiledInstructions","addressTableLookups","getAccountKeys","compiledKeys","compile","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","hasOwnProperty","call","minContextSlot","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","every","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","commitment","maxRetries","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","allocate","owner","transfer","dataLayout","array","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","$c3af9e523501759a$var$objToString","$c3af9e523501759a$var$objKeys","obj","$c3af9e523501759a$var$stringify","val","isArrayProp","max","propVal","toStr","isFinite","returnVal","trailingZeros","n","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","$c3af9e523501759a$var$fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","url","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","readyState","reject","notify","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","coerce","instance","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","validator","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","disableRetryOnRateLimit","httpAgent","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_buildArgs","requestHash","fastStableStringify","unsafeRes","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","makeWebsocketUrl","customFetch","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","callback","body","agent","headers","too_many_requests_retries","waitTime","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","then","catch","e","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","configOrCommitment","configWithoutEncoding","strategy","rawSignature","decodedSignature","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","done","removeSignatureListener","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","abortConfirmation","confirmationPromise","cancellationPromise","outcome","race","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","signatureStatus","commitmentForStatus","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","lockedWritableAccounts","getRecentBlockhashAndContext","getLatestBlockhashAndContext","_buildArgsAtLeastConfirmed","transactionDetails","extra","c","block","endSlot","firstAvailableBlock","getFirstAvailableBlock","getConfirmedBlockSignatures","until","highestConfirmedRoot","getSlot","before","getConfirmedSignaturesForAddress2","accountInfo","fromAccountData","to","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","_setSubscription","nextSubscription","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","lookupTableAddress","bumpSeed","recentSlot","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPublicKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","digest","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressInstructionIndex","pkey","messageHash","msgHash","der","recovered","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","stakePubkey","lockup","maybeLockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","Voter","VoteProgram","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","$7de9086d7e082af9$var$SHA512_Kh","$7de9086d7e082af9$var$SHA512_Kl","$enM9Y","split","$7de9086d7e082af9$var$SHA512_W_H","Uint32Array","$7de9086d7e082af9$var$SHA512_W_L","$7de9086d7e082af9$var$SHA512","$bGPxj","SHA2","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","process","view","getUint32","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","l","All","add3L","add3H","roundClean","destroy","SHA512","$7de9086d7e082af9$var$SHA512_224","outputLen","$7de9086d7e082af9$var$SHA512_256","$7de9086d7e082af9$var$SHA384","$8TOpa","wrapConstructor","sha512_224","sha512_256","sha384","$882b97f99e96093e$var$SHA2","Hash","blockLen","padOffset","isLE","finished","pos","destroyed","createView","$96h3W","exists","take","min","subarray","dataView","digestInto","out","output","setBigUint64","_32n","_u32_max","wh","wl","setUint32","$882b97f99e96093e$var$setBigUint64","oview","outLen","_cloneInto","$6a01e8e35df58a38$var$number","isSafeInteger","$6a01e8e35df58a38$var$bool","$6a01e8e35df58a38$var$bytes","lengths","$6a01e8e35df58a38$var$hash","$6a01e8e35df58a38$var$exists","checkFinished","$6a01e8e35df58a38$var$output","bool","$6a01e8e35df58a38$var$assert","u8","u32","DataView","rotr","word","$67aa8f207effc08a$var$hexes","v","padStart","bytesToHex","uint8a","hex","hexToBytes","hexByte","byte","isNaN","$67aa8f207effc08a$var$utf8ToBytes","TextEncoder","$67aa8f207effc08a$var$toBytes","nextTick","asyncLoop","iters","tick","ts","diff","utf8ToBytes","arrays","a","pad","clone","checkOpts","defaults","hashConstructor","hashC","tmp","wrapConstructorWithOpts","hashCons","randomBytes","$1S4Dr","crypto","getRandomValues","$a78892359d7f568d$var$U32_MASK64","$a78892359d7f568d$var$_32n","$a78892359d7f568d$var$fromBig","le","$a78892359d7f568d$var$split","lst","fromBig","toBig","$a78892359d7f568d$var$add","$a78892359d7f568d$var$u64","s","low","$kjyEk","$721d6d32c1661a16$var$_0n","$721d6d32c1661a16$var$_1n","$721d6d32c1661a16$var$_2n","$721d6d32c1661a16$var$_8n","$721d6d32c1661a16$var$CU_O","$721d6d32c1661a16$export$8ff8607b70325343","d","P","Gx","Gy","$721d6d32c1661a16$var$POW_2_256","$721d6d32c1661a16$var$SQRT_M1","$721d6d32c1661a16$var$SQRT_AD_MINUS_ONE","$721d6d32c1661a16$var$INVSQRT_A_MINUS_D","$721d6d32c1661a16$var$ONE_MINUS_D_SQ","$721d6d32c1661a16$var$D_MINUS_ONE_SQ","$721d6d32c1661a16$export$c82dbe8d384844da","z","t","p","$721d6d32c1661a16$export$baf26146a414f24a","ZERO","$721d6d32c1661a16$var$mod","points","toInv","nums","inverted","$721d6d32c1661a16$var$invert","acc","num","reduceRight","$721d6d32c1661a16$var$invertBatch","toAffine","toAffineBatch","fromAffine","other","$721d6d32c1661a16$var$assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","T1","T2","subtract","precomputeWindow","W","windows","window","wNAF","affinePoint","_WINDOW_SIZE","precomputes","$721d6d32c1661a16$var$pointPrecomputes","normalizeZ","f","windowSize","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","$721d6d32c1661a16$var$constTimeNegate","multiply","scalar","$721d6d32c1661a16$var$normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","is0","ax","ay","zz","fromRistrettoBytes","$721d6d32c1661a16$var$legacyRist","toRistrettoBytes","fromRistrettoHash","neg","$721d6d32c1661a16$var$assertRstPoint","$721d6d32c1661a16$export$5e87c4f36f27816d","ep","r0","r","Ns","isValid","Ns_D_is_sq","$721d6d32c1661a16$var$uvRatio","s_","$721d6d32c1661a16$var$edIsNegative","Nt","s2","W0","W1","W2","W3","r1","$721d6d32c1661a16$var$bytes255ToNumberLE","$721d6d32c1661a16$var$ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","$721d6d32c1661a16$var$equalBytes","$721d6d32c1661a16$var$numberTo32BytesLE","u1","u2","u1_2","u2_2","I","$721d6d32c1661a16$var$invertSqrt","Dx","Dy","toRawBytes","u2sq","invsqrt","D1","D2","zInv","_x","_y","toHex","$721d6d32c1661a16$var$bytesToHex","one","two","WeakMap","_setWindowSize","strict","normed","$721d6d32c1661a16$var$bytesToNumberLE","y2","u","isXOdd","$721d6d32c1661a16$var$getExtendedPublicKey","point","toX25519","$721d6d32c1661a16$export$848620f5f2f26e86","assertValidity","$721d6d32c1661a16$var$concatBytes","$721d6d32c1661a16$var$hexes","$721d6d32c1661a16$var$hexToBytes","$721d6d32c1661a16$var$numberTo32BytesBE","reverse","$721d6d32c1661a16$var$MAX_255B","modulo","q","$721d6d32c1661a16$var$pow2","power","$721d6d32c1661a16$var$pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","v3","v7","pow_p_5_8","vx2","root1","root2","useRoot1","useRoot2","noRoot","$721d6d32c1661a16$var$modlLE","expectedLength","$721d6d32c1661a16$var$adjustBytes25519","$721d6d32c1661a16$var$checkPrivateKey","$721d6d32c1661a16$var$getKeyFromHash","hashed","head","pointBytes","$721d6d32c1661a16$var$_sha512Sync","$721d6d32c1661a16$var$sha512s","$721d6d32c1661a16$export$eab97d15b1788b8d","$721d6d32c1661a16$var$getExtendedPublicKeySync","$721d6d32c1661a16$var$prepareVerification","sig","pub","$721d6d32c1661a16$var$finishVerification","SB","k","kA","$721d6d32c1661a16$export$92d6409d68f0739a","getExtendedPublicKey","R","$721d6d32c1661a16$var$crypto","node","web","self","TORSION_SUBGROUP","hashToPrivateScalar","messages","subtle","createHash","precompute","cached","defineProperties","configurable","$f5033b05ff7329b3$var$Maj","$f5033b05ff7329b3$var$SHA256_K","$f5033b05ff7329b3$var$IV","$f5033b05ff7329b3$var$SHA256_W","$f5033b05ff7329b3$var$SHA256","W15","s0","s1","$f5033b05ff7329b3$var$SHA224","sha224","$5296450c35a171ab$var$__createBinding","__createBinding","o","k2","enumerable","$5296450c35a171ab$var$__setModuleDefault","__setModuleDefault","$5296450c35a171ab$var$__decorate","__decorate","decorators","target","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","$5296450c35a171ab$var$__importStar","__importStar","mod","__esModule","$5296450c35a171ab$var$__importDefault","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","$5296450c35a171ab$var$bn_js_1","$5296450c35a171ab$var$bs58_1","$5296450c35a171ab$var$encoding","$5296450c35a171ab$var$textDecoder","TextDecoder","fatal","$5296450c35a171ab$require$Buffer","$5296450c35a171ab$var$INITIAL_LENGTH","$5296450c35a171ab$var$BorshError","fieldPath","originalMessage","addToFieldPath","fieldName","$5296450c35a171ab$var$BinaryWriter","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeUInt32LE","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","writeString","writeFixedArray","writeArray","fn","$5296450c35a171ab$var$handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","RangeError","$5296450c35a171ab$var$BinaryReader","readU8","readUInt8","readU16","readUInt16LE","readU32","readUInt32LE","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","$5296450c35a171ab$var$capitalizeFirstLetter","toUpperCase","$5296450c35a171ab$var$serializeField","fieldType","writer","$5296450c35a171ab$var$serializeStruct","borshSerialize","structSchema","idx","$5296450c35a171ab$var$deserializeField","reader","$5296450c35a171ab$var$deserializeStruct","classType","borshDeserialize","Writer","Reader","$f260af419b27244f$export$88fb0cfd153261a7","$f260af419b27244f$export$9c6b53e35bc51b5c","$f260af419b27244f$var$inRange","$f260af419b27244f$var$ToDictionary","$f260af419b27244f$var$end_of_stream","$f260af419b27244f$var$Stream","tokens","endOfStream","read","prepend","token","pop","$f260af419b27244f$var$finished","$f260af419b27244f$var$decoderError","opt_code_point","$f260af419b27244f$var$DEFAULT_ENCODING","$f260af419b27244f$var$TextDecoder","String","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","$f260af419b27244f$var$TextEncoder","_encoder","_options","$f260af419b27244f$var$UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","$f260af419b27244f$var$UTF8Encoder","temp","input","ArrayBuffer","input_stream","code_points","cp","fromCharCode","$f260af419b27244f$var$codePointsToString","opt_string","$f260af419b27244f$var$stringToCodePoints","$09c4e3f7de797447$var$checkUint8Array","$09c4e3f7de797447$var$uint8ArrayToBuffer","$6ZWSX","checkUint8Array","uint8ArrayToBuffer","$09c4e3f7de797447$var$Layout","isInteger","makeDestinationObject","getSpan","replicate","rv","fromArray","$09c4e3f7de797447$var$nameWithProperty","lo","nameWithProperty","bindConstructorLayout","Class","layout_","boundConstructor_","$09c4e3f7de797447$var$ExternalLayout","isCount","ExternalLayout","$09c4e3f7de797447$var$GreedyCount","elementSpan","rem","GreedyCount","$09c4e3f7de797447$var$OffsetLayout","$09c4e3f7de797447$var$UInt","$09c4e3f7de797447$var$UIntBE","OffsetLayout","readUIntLE","writeUIntLE","UInt","readUIntBE","writeUIntBE","UIntBE","$09c4e3f7de797447$var$Int","readIntLE","writeIntLE","Int","$09c4e3f7de797447$var$IntBE","readIntBE","writeIntBE","IntBE","$09c4e3f7de797447$var$V2E32","$09c4e3f7de797447$var$divmodInt64","hi32","$09c4e3f7de797447$var$roundedInt64","lo32","$09c4e3f7de797447$var$NearUInt64","NearUInt64","$09c4e3f7de797447$var$NearUInt64BE","readUInt32BE","writeUInt32BE","NearUInt64BE","$09c4e3f7de797447$var$NearInt64","readInt32LE","writeInt32LE","NearInt64","$09c4e3f7de797447$var$NearInt64BE","readInt32BE","writeInt32BE","NearInt64BE","$09c4e3f7de797447$var$Float","readFloatLE","writeFloatLE","Float","$09c4e3f7de797447$var$FloatBE","readFloatBE","writeFloatBE","FloatBE","$09c4e3f7de797447$var$Double","readDoubleLE","writeDoubleLE","Double","$09c4e3f7de797447$var$DoubleBE","readDoubleBE","writeDoubleBE","DoubleBE","$09c4e3f7de797447$var$Sequence","elo","Sequence","$09c4e3f7de797447$var$Structure","decodePrefixes","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","layoutFor","offsetOf","Structure","$09c4e3f7de797447$var$UnionDiscriminator","UnionDiscriminator","$09c4e3f7de797447$var$UnionLayoutDiscriminator","UnionLayoutDiscriminator","$09c4e3f7de797447$var$Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","addVariant","variant","$09c4e3f7de797447$var$VariantLayout","vb","Union","$09c4e3f7de797447$var$fixBitwiseResult","VariantLayout","$09c4e3f7de797447$var$BitStructure","msb","_packedSetValue","_packedGetValue","addField","bits","bf","$09c4e3f7de797447$var$BitField","addBoolean","$09c4e3f7de797447$var$Boolean","fieldFor","BitStructure","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","BitField","$09c4e3f7de797447$var$Blob","srcBuffer","write","Blob","$09c4e3f7de797447$var$CString","srcb","CString","$09c4e3f7de797447$var$UTF8","maxSpan","UTF8","$09c4e3f7de797447$var$Constant","Constant","greedy","u16","u24","u40","u48","nu64","u16be","u24be","u32be","u40be","u48be","nu64be","s8","s16","s24","s32","s40","s48","ns64","s16be","s24be","s32be","s40be","s48be","ns64be","f32","f32be","f64","f64be","struct","seq","unionLayoutDiscriminator","cstr","utf8","constant","reversed","$c0e94fe1a84d811b$require$Buffer","toBigIntBE","width","toBufferBE","StructError","failure","failures","path","_cached","isObject","print","toFailure","branch","refinement","toFailures","iterator","run","ctx","coercer","valid","refiner","props","is","validate","tuples","shiftIterator","define","Element","description","never","Key","Value","Elements","Never","Structs","S","first","$5647400503806718$var$ClientBrowser","callServer","reviver","replacer","generator","$5647400503806718$require$uuid","notificationIdNull","isBatch","hasCallback","$4kTUs","_parseResponse","responseText","parse","isError","isNotError","$7qKRb","$3fa3ae484854b431$export$2e2bcd8739ae039","rnds","random","rng","$2uohp","$568f4ee4022ba00e$var$getRandomValues","$568f4ee4022ba00e$var$rnds8","$568f4ee4022ba00e$export$2e2bcd8739ae039","msCrypto","$64ZUg","$1d0137947e8554ce$var$byteToHex","$1d0137947e8554ce$var$i","$1d0137947e8554ce$export$2e2bcd8739ae039","uuid","$4meF0","$46d323206dcbf256$export$2e2bcd8739ae039","$32c496bfb6c27b56$export$2e2bcd8739ae039","$3284662ae09c2cc1$require$uuid","$6adcaae0654f4641$var$_regenerator","$1jnue","$6adcaae0654f4641$var$_asyncToGenerator2","$6adcaae0654f4641$var$_typeof2","$6adcaae0654f4641$var$_classCallCheck2","$6adcaae0654f4641$var$_createClass2","$6adcaae0654f4641$var$_inherits2","$6adcaae0654f4641$var$_possibleConstructorReturn2","$6adcaae0654f4641$var$_getPrototypeOf2","$6adcaae0654f4641$var$_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","$6adcaae0654f4641$var$_isNativeReflectConstruct","Super","NewTarget","$6adcaae0654f4641$var$CommonClient","_EventEmitter","CommonClient","_unsubscribe","_subscribe","_listMethods","_login","_super","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","getOwnPropertySymbols","propertyIsEnumerable","$6adcaae0654f4641$var$__rest","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","_this2","send","promise","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_callee2","_context2","_this3","_callee3","event","_context3","_x2","_callee4","_context4","_x3","_this4","$6adcaae0654f4641$require$Buffer","listeners","$3vRz3","EventEmitter","$aAhot","subClass","superClass","$7b4ac2338b8e8f97$var$_setPrototypeOf","setPrototypeOf","__proto__","$ac4cd79166dac6e4$var$_typeof","$6zC7B","ReferenceError","$93d4339c80153a6a$var$_getPrototypeOf","getPrototypeOf","$8fa6955f5e890204$var$WebSocketBrowserImpl","$8fa6955f5e890204$var$_classCallCheck2","$8fa6955f5e890204$var$_createClass2","$8fa6955f5e890204$var$_inherits2","$8fa6955f5e890204$var$_possibleConstructorReturn2","$8fa6955f5e890204$var$_getPrototypeOf2","$8fa6955f5e890204$var$_createSuper","$8fa6955f5e890204$var$_isNativeReflectConstruct","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","$249c00e21644efb9$var$SHA3_PI","$249c00e21644efb9$var$SHA3_ROTL","$249c00e21644efb9$var$_SHA3_IOTA","$249c00e21644efb9$var$_0n","$249c00e21644efb9$var$_1n","$249c00e21644efb9$var$_2n","$249c00e21644efb9$var$_7n","$249c00e21644efb9$var$_256n","$249c00e21644efb9$var$_0x71n","round","$249c00e21644efb9$var$SHA3_IOTA_H","$249c00e21644efb9$var$SHA3_IOTA_L","$249c00e21644efb9$var$rotlH","rotlBH","rotlSH","$249c00e21644efb9$var$rotlL","rotlBL","rotlSL","$249c00e21644efb9$var$keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","$249c00e21644efb9$var$Keccak","suffix","enableXOF","posOut","state32","keccak","finish","writeInto","bufferOut","xofInto","xof","Keccak","$249c00e21644efb9$var$gen","sha3_224","sha3_256","sha3_384","sha3_512","keccak_224","keccak_384","keccak_512","$249c00e21644efb9$var$genShake","dkLen","shake128","shake256","$5d41789ffd71b2d3$var$HMAC","_key","iHash","oHash"],"version":3,"file":"solanaProvider.esm.788b1dde.js.map"}
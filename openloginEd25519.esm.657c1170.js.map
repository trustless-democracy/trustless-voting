{"mappings":"0ZAQA,MAAMA,EAAKC,KAAaC,SAElB,SAAUC,EAAcC,GAI5B,IAAIC,EAEFA,EADwB,iBAAfD,EACCE,EAAOC,KAAKH,EAAY,OAExBA,EAIZ,MAAMI,EAAI,IAAIC,WAAW,IACnBC,EAAI,CAACV,EAAEW,KAAMX,EAAEW,KAAMX,EAAEW,KAAMX,EAAEW,MAC/BC,EAAK,IAAIH,WAAW,IAAI,IAAIA,WAAWJ,MAAa,IAAII,WAAW,MACnEI,EAAK,IAAIJ,WAAW,IAC1BT,EAAEc,YAAYN,EAAGI,EAAI,IAErBJ,EAAE,IAAM,IAERA,EAAE,KAAO,IAETA,EAAE,KAAO,GACTR,EAAEe,WAAWL,EAAGF,GAChBR,EAAEgB,KAAKH,EAAIH,GACX,IAAK,IAAIO,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAAGL,EAAGK,EAAI,IAAMJ,EAAGI,GAEhD,MAAO,CAAEL,GAAIN,EAAOC,KAAKK,GAAKC,GAAIP,EAAOC,KAAKM,GAChD,C","sources":["node_modules/@toruslabs/openlogin-ed25519/src/utils.ts"],"sourcesContent":["import nacl from \"@toruslabs/tweetnacl-js\";\n\nexport type SECP256K1KeyType = \"secp256k1\";\nexport type ED25519KeyType = \"ed25519\";\n\nexport type SECP256K1Key = Buffer;\nexport type ED25519Key = Buffer;\n\nconst l = (nacl as any).lowlevel;\n\nexport function getED25519Key(privateKey: string | Buffer): {\n  sk: Buffer;\n  pk: Buffer;\n} {\n  let privKey: Buffer;\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  }\n  // Implementation copied from tweetnacl\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n\n  d[0] &= 248;\n\n  d[31] &= 127;\n\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return { sk: Buffer.from(sk), pk: Buffer.from(pk) };\n}\n"],"names":["l","nacl","lowlevel","getED25519Key","privateKey","privKey","Buffer","from","d","Uint8Array","p","gf","sk","pk","crypto_hash","scalarbase","pack","i"],"version":3,"file":"openloginEd25519.esm.657c1170.js.map"}
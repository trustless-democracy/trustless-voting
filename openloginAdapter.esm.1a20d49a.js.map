{"mappings":"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","sources":["node_modules/@web3auth/modal/node_modules/@web3auth/openlogin-adapter/src/config.ts","node_modules/@web3auth/modal/node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts","node_modules/@parcel/runtime-js/lib/runtime-cbb8a60fc490bc86.js","node_modules/@parcel/runtime-js/lib/runtime-1e7a3f6758d67269.js","node_modules/@parcel/runtime-js/lib/runtime-31404807366662d1.js"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT || this.openloginOptions.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      } else if (error instanceof Web3AuthError) {\n        throw error;\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings>): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.privKeyProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.privKeyProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey) {\n      if (!this.openloginInstance.coreKitKey) {\n        throw WalletLoginError.coreKitKeyNotFound();\n      }\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"dHHbY\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"1TvTv\"))]).then(() => parcelRequire('5iwia'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"lbY2V\"))).then(() => parcelRequire('2Ha7f'));","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"dHHbY\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bwM3s\"))]).then(() => parcelRequire('8e2Ug'));"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","loginSettings","OpenloginAdapter","BaseAdapter","constructor","params","super","_defineProperty","this","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","loginProvider","setAdapterSettings","_objectSpread","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","chainConfigProxy","provider","_this$privKeyProvider","privKeyProvider","_","Error","async","options","checkInitializationRequirements","WalletInitializationError","invalidParams","openloginOptions","isRedirectResult","REDIRECT","SESSIONLESS_REDIRECT","redirectResult","getHashQueryParams","Object","keys","length","_pid","replaceUrlOnRedirect","openloginInstance","OpenLogin","log","debug","init","status","READY","emit","ADAPTER_EVENTS","_getFinalPrivKey","autoConnect","rehydrated","connect","error","arguments","undefined","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","Web3AuthError","connectionError","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","idToken","getUserInfo","defaultOptions","info","_this$privKeyProvider2","checkAddChainRequirements","addChain","addChainConfig","_this$privKeyProvider3","checkSwitchChainRequirements","switchChain","getChainConfig","chainId","_this$openloginOption","finalPrivKey","privKey","coreKitKey","coreKitKeyNotFound","_params$extraLoginOpt","currentChainNamespace","SOLANA","SolanaPrivateKeyProvider","parcelRequire","config","EthereumPrivateKeyProvider","OTHER","CommonPrivateKeyProvider","extraLoginOptions","id_token","_params$extraLoginOpt2","curve","SUPPORTED_KEY_CURVES","ED25519","SECP256K1","login","merge","login_hint","getED25519Key","sk","toString","setupProvider","reconnected","module","exports","Promise","all","import","resolve","then"],"version":3,"file":"openloginAdapter.esm.1a20d49a.js.map"}
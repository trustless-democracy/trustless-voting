{"mappings":"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","sources":["node_modules/@web3auth/phantom-adapter/src/utils.ts","node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts","node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts"],"sourcesContent":["import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport type PhantomAdapterOptions = BaseAdapterSettings;\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) {\n              reject(WalletInitializationError.notInstalled());\n              return;\n            }\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      await super.disconnect();\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  public async addChain(chainConfig: CustomChainConfig, init = false): Promise<void> {\n    super.checkAddChainRequirements(init);\n    this.phantomProvider?.addChain(chainConfig);\n    this.addChainConfig(chainConfig);\n  }\n\n  public async switchChain(params: { chainId: string }, init = false): Promise<void> {\n    super.checkSwitchChainRequirements(params, init);\n    await this.phantomProvider?.switchChain(params);\n    this.setAdapterSettings({ chainConfig: this.getChainConfig(params.chainId) as CustomChainConfig });\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n","import {\n  ADAPTER_EVENTS,\n  ADAPTER_STATUS,\n  AdapterInitOptions,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  checkIfTokenIsExpired,\n  clearToken,\n  getChainConfig,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  async init(_?: AdapterInitOptions): Promise<void> {\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, 1);\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId,\n        this.web3AuthNetwork\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnectSession(): Promise<void> {\n    super.checkDisconnectionRequirements();\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n}\n"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","async","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","length","undefined","window","solana","isPhantom","_window$solana2","PhantomAdapter","BaseSolanaAdapter","constructor","super","_defineProperty","this","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","_wallet","off","_onDisconnect","rehydrated","status","CONNECTED","READY","emit","ADAPTER_EVENTS","DISCONNECTED","isWalletConnected","_this$_wallet","isConnected","provider","_this$phantomProvider","phantomProvider","_","Error","init","checkInitializationRequirements","WalletInitializationError","notInstalled","PhantomInjectedProvider","config","chainConfig","log","debug","autoConnect","connect","error","_this","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","windowClosed","_len","args","Array","_key","apply","reason","Web3AuthError","WalletLoginError","connectionError","message","publicKey","on","ERRORED","cleanup","disconnectSession","_this$_wallet2","disconnect","disconnectionError","notConnectedError","_this$phantomProvider2","checkAddChainRequirements","addChain","addChainConfig","params","_this$phantomProvider3","checkSwitchChainRequirements","switchChain","setAdapterSettings","getChainConfig","chainId","injectedProvider","setupProvider","reconnected","BaseAdapter","chainNamespace","accounts","request","method","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","challenge","signChallenge","encodedMessage","TextEncoder","encode","signedMessage","display","verifySignedChallenge","bs58","sessionTime","clientId","web3AuthNetwork","saveToken","checkDisconnectionRequirements","clearToken"],"version":3,"file":"phantomAdapter.esm.38d7b5f1.js.map"}